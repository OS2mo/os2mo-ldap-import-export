# SPDX-FileCopyrightText: Magenta ApS <https://magenta.dk>
# SPDX-License-Identifier: MPL-2.0
import json
from unittest.mock import ANY

import pytest
from fastramqpi.pytest_util import retry
from ldap3 import Connection
from more_itertools import one

from mo_ldap_import_export.autogenerated_graphql_client import GraphQLClient
from mo_ldap_import_export.autogenerated_graphql_client.input_types import (
    OrganisationUnitFilter,
)
from mo_ldap_import_export.ldap import ldap_add
from mo_ldap_import_export.ldap import ldap_modify
from mo_ldap_import_export.utils import combine_dn_strings
from mo_ldap_import_export.utils import mo_today


@pytest.mark.integration_test
@pytest.mark.envvar(
    {
        "LISTEN_TO_CHANGES_IN_MO": "False",
        "LISTEN_TO_CHANGES_IN_LDAP": "True",
        "CONVERSION_MAPPING": json.dumps(
            {
                "ldap_to_mo_org_unit": {
                    "OrganisationUnit": {
                        "objectClass": "OrganisationUnit",
                        "_import_to_mo_": "true",
                        "_ldap_attributes_": ["cn", "ou", "l"],
                        # "l" is arbitrarily chosen as an enabled/disabled marker
                        "_terminate_": "{{ now()|mo_datestring if ldap.l == 'EXPIRED' else '' }}",
                        "uuid": "{{ org_unit_uuid or '' }}",  # TODO: why is this required?
                        "user_key": "{{ ldap.ou }}",
                        "name": "{{ ldap.cn }}",
                        "org_unit_type": "{{ get_org_unit_type_uuid('Afdeling') }}",
                    },
                },
                # TODO: why is this required?
                "username_generator": {
                    "combinations_to_try": ["FFFX", "LLLX"],
                },
            }
        ),
    }
)
@pytest.mark.usefixtures("test_client")
@pytest.mark.xfail(reason="settings invalid")
@pytest.mark.xfail(reason="get_org_unit_type does not exist")
@pytest.mark.xfail(reason="cannot create org-units yet")
async def test_to_mo(
    graphql_client: GraphQLClient,
    ldap_connection: Connection,
    ldap_org: list[str],
) -> None:
    @retry()
    async def assert_org_unit(expected: dict) -> None:
        org_units = await graphql_client._testing__org_unit_read(
            filter=OrganisationUnitFilter(user_keys=["testou"])
        )
        org_unit = one(org_units.objects)
        validities = one(org_unit.validities)
        assert validities.dict() == expected

    org_unit_dn = combine_dn_strings(["ou=testou"] + ldap_org)

    # LDAP: Create
    given_name = "create"
    await ldap_add(
        ldap_connection,
        dn=org_unit_dn,
        object_class=["top", "organizationalUnit"],
        attributes={
            "objectClass": ["top", "organizationalUnit"],
            "cn": given_name,
        },
    )
    mo_org_unit = {
        "uuid": ANY,
        "user_key": ANY,
        "name": given_name,
        "unit_type": {"user_key": "Afdeling"},
    }
    await assert_org_unit(mo_org_unit)

    # LDAP: Edit
    given_name = "edit"
    await ldap_modify(
        ldap_connection,
        dn=org_unit_dn,
        changes={
            "cn": [("MODIFY_REPLACE", given_name)],
        },
    )
    mo_org_unit = {
        **mo_org_unit,
        "given_name": given_name,
    }
    await assert_org_unit(mo_org_unit)

    # LDAP: Edit
    given_name = "delete"
    await ldap_modify(
        ldap_connection,
        dn=org_unit_dn,
        changes={
            "cn": [("MODIFY_REPLACE", given_name)],
        },
    )
    mo_org_unit = {
        **mo_org_unit,
        "given_name": given_name,
    }
    await assert_org_unit(mo_org_unit)

    # LDAP: Terminate
    await ldap_modify(
        ldap_connection,
        dn=org_unit_dn,
        changes={
            "l": [("MODIFY_REPLACE", "EXPIRED")],
        },
    )
    mo_org_unit = {
        **mo_org_unit,
        "validity": {"from_": mo_today(), "to": mo_today()},
    }
    await assert_org_unit(mo_org_unit)
