# SPDX-FileCopyrightText: Magenta ApS <https://magenta.dk>
# SPDX-License-Identifier: MPL-2.0
from uuid import UUID
from uuid import uuid4

import pytest
from more_itertools import one

from mo_ldap_import_export.autogenerated_graphql_client import GraphQLClient
from mo_ldap_import_export.autogenerated_graphql_client.input_types import (
    ClassCreateInput,
)
from mo_ldap_import_export.autogenerated_graphql_client.input_types import FacetFilter
from mo_ldap_import_export.autogenerated_graphql_client.input_types import (
    ITSystemCreateInput,
)
from mo_ldap_import_export.autogenerated_graphql_client.input_types import (
    ITUserCreateInput,
)
from mo_ldap_import_export.autogenerated_graphql_client.input_types import (
    RoleBindingCreateInput,
)
from mo_ldap_import_export.environments.main import ituser_uuid_to_rolebinding_uuids


@pytest.fixture
async def role_facet(graphql_client: GraphQLClient) -> UUID:
    result = await graphql_client.read_facet_uuid(
        filter=FacetFilter(user_keys=["role"])
    )
    role = one(result.objects)
    return role.uuid


@pytest.fixture
async def itsystem(graphql_client: GraphQLClient) -> UUID:
    itsystem = await graphql_client.itsystem_create(
        input=ITSystemCreateInput(
            user_key="borgerpc",
            name="BorgerPC",
            validity={"from": "1970-01-01T00:00:00Z"},
        )
    )
    return itsystem.uuid


@pytest.fixture
async def role(graphql_client: GraphQLClient, itsystem: UUID, role_facet: UUID) -> UUID:
    role = await graphql_client.class_create(
        input=ClassCreateInput(
            name="admin",
            user_key="admin",
            scope="TEXT",
            facet_uuid=role_facet,
            it_system_uuid=itsystem,
            validity={"from": "1970-01-01T00:00:00Z"},
        )
    )
    return role.uuid


@pytest.fixture
async def ituser(
    graphql_client: GraphQLClient, itsystem: UUID, mo_person: UUID
) -> UUID:
    ituser = await graphql_client.ituser_create(
        input=ITUserCreateInput(
            user_key="alvida",
            itsystem=itsystem,
            person=mo_person,
            validity={"from": "1970-01-01T00:00:00Z"},
        )
    )
    return ituser.uuid


@pytest.mark.integration_test
async def test_no_ituser(
    graphql_client: GraphQLClient,
) -> None:
    result = await ituser_uuid_to_rolebinding_uuids(graphql_client, uuid4())
    assert result == set()


@pytest.mark.integration_test
@pytest.mark.parametrize(
    "validity",
    [
        # past
        {"from": "1970-01-01T00:00:00Z", "to": "1980-01-01T00:00:00Z"},
        # present
        {"from": "1970-01-01T00:00:00Z"},
        # future
        {"from": "3000-01-01T00:00:00Z"},
    ],
)
async def test_no_rolebinding_ituser(
    graphql_client: GraphQLClient,
    itsystem: UUID,
    mo_person: UUID,
    validity: dict[str, str],
) -> None:
    ituser = await graphql_client.ituser_create(
        input=ITUserCreateInput(
            user_key="alvida",
            itsystem=itsystem,
            person=mo_person,
            validity=validity,
        )
    )
    result = await ituser_uuid_to_rolebinding_uuids(graphql_client, ituser.uuid)
    assert result == set()


@pytest.mark.integration_test
@pytest.mark.parametrize(
    "validity",
    [
        # past
        {"from": "1970-01-01T00:00:00Z", "to": "1980-01-01T00:00:00Z"},
        # future
        {"from": "3000-01-01T00:00:00Z"},
    ],
)
async def test_past_and_future_rolebinding_ituser(
    graphql_client: GraphQLClient,
    role: UUID,
    ituser: UUID,
    validity: dict[str, str],
) -> None:
    await graphql_client._testing__rolebinding_create(
        input=RoleBindingCreateInput(
            user_key="-", ituser=ituser, role=role, validity=validity
        )
    )

    result = await ituser_uuid_to_rolebinding_uuids(graphql_client, ituser)
    assert result == set()


@pytest.mark.integration_test
async def test_present_rolebinding_ituser(
    graphql_client: GraphQLClient,
    role: UUID,
    ituser: UUID,
) -> None:
    rolebinding = await graphql_client._testing__rolebinding_create(
        input=RoleBindingCreateInput(
            user_key="-",
            ituser=ituser,
            role=role,
            validity={"from": "1970-01-01T00:00:00Z"},
        )
    )

    result = await ituser_uuid_to_rolebinding_uuids(graphql_client, ituser)
    assert result == {rolebinding.uuid}


@pytest.mark.integration_test
@pytest.mark.parametrize(
    "validity1,validity2,expected",
    [
        # Both past
        (
            {"from": "1970-01-01T00:00:00Z", "to": "1980-01-01T00:00:00Z"},
            {"from": "1970-01-01T00:00:00Z", "to": "1980-01-01T00:00:00Z"},
            set(),
        ),
        # Both present
        (
            {"from": "1970-01-01T00:00:00Z"},
            {"from": "1970-01-01T00:00:00Z"},
            {1, 2},
        ),
        # Both future
        (
            {"from": "3000-01-01T00:00:00Z"},
            {"from": "3000-01-01T00:00:00Z"},
            set(),
        ),
        # One past, one present
        (
            {"from": "1970-01-01T00:00:00Z", "to": "1980-01-01T00:00:00Z"},
            {"from": "1970-01-01T00:00:00Z"},
            {2},
        ),
        # One past, one present, flipped
        (
            {"from": "1970-01-01T00:00:00Z"},
            {"from": "1970-01-01T00:00:00Z", "to": "1980-01-01T00:00:00Z"},
            {1},
        ),
        # One past, one future
        (
            {"from": "1970-01-01T00:00:00Z", "to": "1980-01-01T00:00:00Z"},
            {"from": "3000-01-01T00:00:00Z"},
            set(),
        ),
    ],
)
async def test_present_multiple_rolebindings_ituser(
    graphql_client: GraphQLClient,
    role_facet: UUID,
    itsystem: UUID,
    ituser: UUID,
    validity1: dict[str, str],
    validity2: dict[str, str],
    expected: set[int],
) -> None:
    expected_set = set()

    role1 = await graphql_client.class_create(
        input=ClassCreateInput(
            name="admin",
            user_key="admin",
            scope="TEXT",
            facet_uuid=role_facet,
            it_system_uuid=itsystem,
            validity=validity1,
        )
    )
    rolebinding1 = await graphql_client._testing__rolebinding_create(
        input=RoleBindingCreateInput(
            user_key="-", ituser=ituser, role=role1.uuid, validity=validity1
        )
    )
    if 1 in expected:
        expected_set.add(rolebinding1.uuid)

    role2 = await graphql_client.class_create(
        input=ClassCreateInput(
            name="admin",
            user_key="admin",
            scope="TEXT",
            facet_uuid=role_facet,
            it_system_uuid=itsystem,
            validity=validity2,
        )
    )
    rolebinding2 = await graphql_client._testing__rolebinding_create(
        input=RoleBindingCreateInput(
            user_key="-", ituser=ituser, role=role2.uuid, validity=validity2
        )
    )
    if 2 in expected:
        expected_set.add(rolebinding2.uuid)

    result = await ituser_uuid_to_rolebinding_uuids(graphql_client, ituser)
    assert result == expected_set
