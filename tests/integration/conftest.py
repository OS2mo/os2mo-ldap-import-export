# SPDX-FileCopyrightText: 2019-2020 Magenta ApS
# SPDX-License-Identifier: MPL-2.0
"""Integration tests fixtures."""
from collections.abc import AsyncIterator
from typing import Awaitable
from typing import Callable
from typing import cast

import pytest
from asgi_lifespan import LifespanManager
from fastapi import FastAPI
from fastramqpi.context import Context
from fastramqpi.main import FastRAMQPI
from fastramqpi.ramqp import AMQPSystem
from httpx import ASGITransport
from httpx import AsyncClient
from ldap3 import Connection

from mo_ldap_import_export.autogenerated_graphql_client import GraphQLClient
from mo_ldap_import_export.main import create_app
from mo_ldap_import_export.main import create_fastramqpi


@pytest.fixture
async def fastramqpi() -> FastRAMQPI:
    return create_fastramqpi()


@pytest.fixture
async def app(fastramqpi: FastRAMQPI) -> FastAPI:
    return create_app(fastramqpi=fastramqpi)


@pytest.fixture
async def lifespan_app(app: FastAPI) -> AsyncIterator[FastAPI]:
    """ASGI app with lifespan run."""
    async with LifespanManager(app) as manager:
        yield cast(FastAPI, manager.app)


@pytest.fixture
async def context(lifespan_app: FastAPI, fastramqpi: FastRAMQPI) -> Context:
    """FastRAMQPI context after lifespan has been run."""
    return fastramqpi._context


@pytest.fixture
async def test_client(lifespan_app: FastAPI) -> AsyncIterator[AsyncClient]:
    """Create ASGI test client with associated lifecycles."""
    transport = ASGITransport(app=lifespan_app, client=("1.2.3.4", 123))  # type: ignore
    async with AsyncClient(
        transport=transport, base_url="http://example.com"
    ) as client:
        yield client


@pytest.fixture
async def graphql_client(context: Context) -> GraphQLClient:
    """Authenticated GraphQL codegen client for OS2mo."""
    return cast(GraphQLClient, context["graphql_client"])


@pytest.fixture
async def amqpsystem(context: Context) -> AMQPSystem:
    """The MO AMQPSystem."""
    return cast(AMQPSystem, context["amqpsystem"])


@pytest.fixture
async def ldap_connection(context: Context) -> Connection:
    """The integration LDAP connection"""
    return cast(Connection, context["user_context"]["ldap_connection"])


@pytest.fixture
def get_num_queued_messages(
    rabbitmq_management_client: AsyncClient,
) -> Callable[[], Awaitable[int]]:
    """Get number of queued messages in RabbitMQ AMQP."""

    async def _get_num_queued_messages() -> int:
        queues = (await rabbitmq_management_client.get("queues")).json()
        return sum(
            queue.get("messages_ready", 0) + queue.get("messages_unacknowledged", 0)
            for queue in queues
        )

    return _get_num_queued_messages
