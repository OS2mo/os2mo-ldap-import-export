# SPDX-FileCopyrightText: 2019-2020 Magenta ApS
# SPDX-License-Identifier: MPL-2.0
"""Integration tests fixtures."""
from collections.abc import AsyncIterator
from typing import cast

import pytest
from asgi_lifespan import LifespanManager
from fastapi import FastAPI
from fastramqpi.context import Context
from fastramqpi.main import FastRAMQPI
from httpx import ASGITransport
from httpx import AsyncClient

from mo_ldap_import_export.autogenerated_graphql_client import GraphQLClient
from mo_ldap_import_export.main import create_app
from mo_ldap_import_export.main import create_fastramqpi


@pytest.fixture
async def fastramqpi() -> FastRAMQPI:
    return create_fastramqpi()


@pytest.fixture
async def app(fastramqpi: FastRAMQPI) -> FastAPI:
    return create_app(fastramqpi=fastramqpi)


@pytest.fixture
async def lifespan_app(app: FastAPI) -> AsyncIterator[FastAPI]:
    """ASGI app with lifespan run."""
    async with LifespanManager(app) as manager:
        yield cast(FastAPI, manager.app)


@pytest.fixture
async def context(lifespan_app: FastAPI, fastramqpi: FastRAMQPI) -> Context:
    """FastRAMQPI context after lifespan has been run."""
    return fastramqpi._context


@pytest.fixture
async def test_client(lifespan_app: FastAPI) -> AsyncIterator[AsyncClient]:
    """Create ASGI test client with associated lifecycles."""
    transport = ASGITransport(app=lifespan_app, client=("1.2.3.4", 123))  # type: ignore
    async with AsyncClient(
        transport=transport, base_url="http://example.com"
    ) as client:
        yield client


@pytest.fixture
async def graphql_client(context: Context) -> GraphQLClient:
    """Authenticated GraphQL codegen client for OS2mo."""
    return cast(GraphQLClient, context["graphql_client"])
