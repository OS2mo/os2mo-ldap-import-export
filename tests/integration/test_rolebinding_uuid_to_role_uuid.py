# SPDX-FileCopyrightText: Magenta ApS <https://magenta.dk>
# SPDX-License-Identifier: MPL-2.0
from uuid import UUID
from uuid import uuid4

import pytest
from more_itertools import one

from mo_ldap_import_export.autogenerated_graphql_client import GraphQLClient
from mo_ldap_import_export.autogenerated_graphql_client.input_types import (
    ClassCreateInput,
)
from mo_ldap_import_export.autogenerated_graphql_client.input_types import (
    ClassUpdateInput,
)
from mo_ldap_import_export.autogenerated_graphql_client.input_types import FacetFilter
from mo_ldap_import_export.autogenerated_graphql_client.input_types import (
    ITSystemCreateInput,
)
from mo_ldap_import_export.autogenerated_graphql_client.input_types import (
    ITUserCreateInput,
)
from mo_ldap_import_export.autogenerated_graphql_client.input_types import (
    RoleBindingCreateInput,
)
from mo_ldap_import_export.environments.main import rolebinding_uuid_to_role_uuid


@pytest.fixture
async def role_facet(graphql_client: GraphQLClient) -> UUID:
    result = await graphql_client.read_facet_uuid(
        filter=FacetFilter(user_keys=["role"])
    )
    role = one(result.objects)
    return role.uuid


@pytest.fixture
async def itsystem(graphql_client: GraphQLClient) -> UUID:
    itsystem = await graphql_client.itsystem_create(
        input=ITSystemCreateInput(
            user_key="borgerpc",
            name="BorgerPC",
            validity={"from": "1970-01-01T00:00:00Z"},
        )
    )
    return itsystem.uuid


@pytest.fixture
async def role(graphql_client: GraphQLClient, itsystem: UUID, role_facet: UUID) -> UUID:
    role = await graphql_client.class_create(
        input=ClassCreateInput(
            name="admin",
            user_key="admin",
            scope="TEXT",
            facet_uuid=role_facet,
            it_system_uuid=itsystem,
            validity={"from": "1970-01-01T00:00:00Z"},
        )
    )
    return role.uuid


@pytest.fixture
async def ituser(
    graphql_client: GraphQLClient, itsystem: UUID, mo_person: UUID
) -> UUID:
    ituser = await graphql_client.ituser_create(
        input=ITUserCreateInput(
            user_key="alvida",
            itsystem=itsystem,
            person=mo_person,
            validity={"from": "1970-01-01T00:00:00Z"},
        )
    )
    return ituser.uuid


@pytest.mark.integration_test
async def test_no_rolebinding(
    graphql_client: GraphQLClient,
) -> None:
    result = await rolebinding_uuid_to_role_uuid(graphql_client, uuid4())
    assert result is None


@pytest.mark.integration_test
async def test_past_rolebinding(
    graphql_client: GraphQLClient,
    ituser: UUID,
    role: UUID,
) -> None:
    rolebinding = await graphql_client._testing__rolebinding_create(
        input=RoleBindingCreateInput(
            user_key="-",
            ituser=ituser,
            role=role,
            validity={"from": "1970-01-01T00:00:00Z", "to": "1980-01-01T00:00:00Z"},
        )
    )
    result = await rolebinding_uuid_to_role_uuid(graphql_client, rolebinding.uuid)
    assert result is None


@pytest.mark.integration_test
async def test_future_rolebinding(
    graphql_client: GraphQLClient,
    ituser: UUID,
    role: UUID,
) -> None:
    rolebinding = await graphql_client._testing__rolebinding_create(
        input=RoleBindingCreateInput(
            user_key="-",
            ituser=ituser,
            role=role,
            validity={"from": "3000-01-01T00:00:00Z"},
        )
    )
    result = await rolebinding_uuid_to_role_uuid(graphql_client, rolebinding.uuid)
    assert result is None


@pytest.mark.integration_test
async def test_present_rolebinding(
    graphql_client: GraphQLClient,
    ituser: UUID,
    role: UUID,
) -> None:
    rolebinding = await graphql_client._testing__rolebinding_create(
        input=RoleBindingCreateInput(
            user_key="-",
            ituser=ituser,
            role=role,
            validity={"from": "1970-01-01T00:00:00Z"},
        )
    )
    result = await rolebinding_uuid_to_role_uuid(graphql_client, rolebinding.uuid)
    assert result == role


@pytest.mark.integration_test
async def test_present_rolebinding_role_validity(
    graphql_client: GraphQLClient,
    ituser: UUID,
    role: UUID,
    role_facet: UUID,
) -> None:
    rolebinding = await graphql_client._testing__rolebinding_create(
        input=RoleBindingCreateInput(
            user_key="-",
            ituser=ituser,
            role=role,
            validity={"from": "1970-01-01T00:00:00Z"},
        )
    )
    await graphql_client.class_update(
        input=ClassUpdateInput(
            uuid=role,
            name="Administrator",
            user_key="admin",
            facet_uuid=role_facet,
            validity={"from": "1990-01-01T00:00:00Z"},
        )
    )
    result = await rolebinding_uuid_to_role_uuid(graphql_client, rolebinding.uuid)
    assert result == role
