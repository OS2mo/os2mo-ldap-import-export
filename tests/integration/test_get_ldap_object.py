# SPDX-FileCopyrightText: Magenta ApS <https://magenta.dk>
# SPDX-License-Identifier: MPL-2.0
import json
from collections.abc import Awaitable
from collections.abc import Callable

import pytest
from ldap3 import Connection
from more_itertools import one

from mo_ldap_import_export.autogenerated_graphql_client import EmployeeCreateInput
from mo_ldap_import_export.autogenerated_graphql_client import GraphQLClient
from mo_ldap_import_export.ldap import get_ldap_object
from mo_ldap_import_export.ldapapi import LDAPAPI
from mo_ldap_import_export.types import CPRNumber
from mo_ldap_import_export.types import EmployeeUUID


@pytest.mark.integration_test
@pytest.mark.envvar(
    {
        "LISTEN_TO_CHANGES_IN_MO": "False",
        "LISTEN_TO_CHANGES_IN_LDAP": "False",
        "CONVERSION_MAPPING": json.dumps(
            {
                "mo2ldap": """
                    {% set mo_employee = load_mo_employee(uuid, current_objects_only=False) %}

                    {% set username = "hardcoded" %}
                    {% if dn %}
                        {% set attributes = ["carLicense"] %}
                        {% set obj = get_ldap_object(dn, attributes) %}
                        {% set username = obj.carLicense[0] %}
                    {% endif %}

                    {% set display_name_base = mo_employee.given_name + " " + mo_employee.surname %}
                    {% set display_name = display_name_base + " - " + username %}

                    {{
                        {
                            "employeeNumber": mo_employee.cpr_number,
                            "uid": mo_employee.cpr_number,
                            "givenName": mo_employee.given_name,
                            "sn": mo_employee.surname,
                            "cn": mo_employee.given_name + " " + mo_employee.surname,
                            "carLicense": username,
                            "displayName": display_name,
                        }|tojson
                    }}
                """,
                # TODO: why is this required?
                "username_generator": {
                    "combinations_to_try": ["FFFX", "LLLX"],
                },
            }
        ),
    }
)
@pytest.mark.usefixtures("test_client", "ldap_org_unit")
async def test_to_ldap(
    trigger_sync: Callable[[EmployeeUUID], Awaitable[None]],
    graphql_client: GraphQLClient,
    ldap_connection: Connection,
    ldap_api: LDAPAPI,
) -> None:
    mo_person_cpr_number = "0101700000"
    mo_person = await graphql_client.user_create(
        input=EmployeeCreateInput(
            cpr_number=mo_person_cpr_number,
            given_name="Kaelani",
            surname="Vespera",
        )
    )
    # Create the user and fetch the DN
    await trigger_sync(EmployeeUUID(mo_person.uuid))
    dn = one(await ldap_api.cpr2dns(CPRNumber(mo_person_cpr_number)))

    # Check that the created object is as expected
    expected = {
        "objectClass": ["inetOrgPerson"],
        "dn": dn,
        "employeeNumber": "0101700000",
        "uid": ["0101700000"],
        "givenName": ["Kaelani"],
        "sn": ["Vespera"],
        "cn": ["Kaelani Vespera"],
        "carLicense": ["hardcoded"],
        "displayName": "Kaelani Vespera - hardcoded",
    }
    obj = await get_ldap_object(ldap_connection, dn)
    assert obj.dict() == expected

    # Check edits do nothing
    await trigger_sync(EmployeeUUID(mo_person.uuid))
    obj = await get_ldap_object(ldap_connection, dn)
    assert obj.dict() == expected

    # But changes to carLicense directly in LDAP are persisted, and fields using it are
    # updated with the new value found in LDAP
    await ldap_api.modify_ldap_object(dn, {"carLicense": ["modified"]})
    await trigger_sync(EmployeeUUID(mo_person.uuid))
    obj = await get_ldap_object(ldap_connection, dn)
    assert obj.dict() == {
        **expected,
        "carLicense": ["modified"],
        "displayName": "Kaelani Vespera - modified",
    }
