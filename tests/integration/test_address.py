# SPDX-FileCopyrightText: 2019-2020 Magenta ApS
# SPDX-License-Identifier: MPL-2.0
import json
from datetime import datetime
from unittest.mock import ANY
from uuid import UUID

import pytest
from fastramqpi.pytest_util import retry
from httpx import AsyncClient
from ldap3 import Connection
from more_itertools import one

from mo_ldap_import_export.autogenerated_graphql_client import AddressFilter
from mo_ldap_import_export.autogenerated_graphql_client import EmployeeFilter
from mo_ldap_import_export.autogenerated_graphql_client import GraphQLClient
from mo_ldap_import_export.ldap import ldap_add
from mo_ldap_import_export.ldap import ldap_modify
from mo_ldap_import_export.utils import combine_dn_strings


@pytest.mark.integration_test
@pytest.mark.envvar(
    {
        "LISTEN_TO_CHANGES_IN_LDAP": "True",
        "LISTEN_TO_CHANGES_IN_MO": "True",
        "CONVERSION_MAPPING": json.dumps(
            {
                "ldap_to_mo": {
                    "Employee": {
                        "objectClass": "ramodels.mo.employee.Employee",
                        "_import_to_mo_": "false",
                        "uuid": "{{ employee_uuid or NONE }}",  # TODO: why is this required?
                        "cpr_no": "{{ldap.employeeNumber}}",
                    },
                    "EmailEmployee": {
                        "objectClass": "ramodels.mo.details.address.Address",
                        "_import_to_mo_": "true",
                        "_mapper_": "{{ obj.address_type }}",
                        # carLicense is arbitrarily chosen as an enabled/disabled marker
                        "_terminate_": "{{ now()|mo_datestring if ldap.carLicense == 'EXPIRED' else NONE}}",
                        "value": "{{ ldap.mail }}",
                        "address_type": "{{ dict(uuid=get_employee_address_type_uuid('EmailEmployee')) }}",
                        "person": "{{ dict(uuid=employee_uuid ) }}",
                        "visibility": "{{ dict(uuid=get_visibility_uuid('Public')) }}",
                    },
                },
                "mo_to_ldap": {
                    "Employee": {
                        "objectClass": "inetOrgPerson",
                        "_export_to_ldap_": "false",
                        "employeeNumber": "{{mo_employee.cpr_no}}",
                    },
                    "EmailEmployee": {
                        "objectClass": "inetOrgPerson",
                        "_export_to_ldap_": "false",
                        "mail": "{{ mo_employee_address.value }}",
                        "carLicense": "unused but required",  # TODO: why is this required?
                    },
                },
                "username_generator": {
                    "objectClass": "UserNameGenerator",
                    "combinations_to_try": ["FFFX", "LLLX"],
                },
            }
        ),
    }
)
async def test_to_mo(
    test_client: AsyncClient,
    graphql_client: GraphQLClient,
    mo_person: UUID,
    ldap_org: list[str],
    ldap_connection: Connection,
    mo_today: datetime,
) -> None:
    @retry()
    async def assert_address(expected: dict) -> None:
        addresses = await graphql_client._testing__address_read(
            filter=AddressFilter(
                employee=EmployeeFilter(uuids=[mo_person]),
            ),
        )
        address = one(addresses.objects)
        validities = one(address.validities)
        assert validities.dict() == expected

    person_dn = combine_dn_strings(["uid=abk"] + ldap_org)

    # Create
    mail = "abk@ad.kolding.dk"
    await ldap_add(
        ldap_connection,
        dn=person_dn,
        object_class=["top", "person", "organizationalPerson", "inetOrgPerson"],
        attributes={
            "objectClass": ["top", "person", "organizationalPerson", "inetOrgPerson"],
            "uid": "abk",
            "cn": "Aage Bach Klarskov",
            "givenName": "Aage",
            "sn": "Bach Klarskov",
            "ou": "os2mo",
            "mail": mail,
            "userPassword": "{SSHA}j3lBh1Seqe4rqF1+NuWmjhvtAni1JC5A",
            "employeeNumber": "2108613133",
            "title": "Skole underviser",
            "carLicense": "ACTIVE",
        },
    )
    mo_address = {
        "uuid": ANY,
        "user_key": ANY,
        "address_type": {"user_key": "EmailEmployee"},
        "value": mail,
        "value2": None,
        "person": [{"uuid": mo_person}],
        "visibility": {"user_key": "Public"},
        "validity": {"from_": mo_today, "to": None},
    }
    await assert_address(mo_address)

    # Edit
    mail = "new@ad.kolding.dk"
    await ldap_modify(
        ldap_connection,
        dn=person_dn,
        changes={
            "mail": [("MODIFY_REPLACE", mail)],
        },
    )
    mo_address = {
        **mo_address,
        "value": mail,
    }
    await assert_address(mo_address)

    # Terminate
    await ldap_modify(
        ldap_connection,
        dn=person_dn,
        changes={
            "carLicense": [("MODIFY_REPLACE", "EXPIRED")],
        },
    )
    mo_address = {
        **mo_address,
        "validity": {"from_": mo_today, "to": mo_today},
    }
    await assert_address(mo_address)
