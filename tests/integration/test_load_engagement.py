# SPDX-FileCopyrightText: Magenta ApS <https://magenta.dk>
# SPDX-License-Identifier: MPL-2.0
from datetime import datetime
from uuid import UUID

import pytest

from mo_ldap_import_export.autogenerated_graphql_client.input_types import (
    EngagementCreateInput,
)
from mo_ldap_import_export.autogenerated_graphql_client.input_types import (
    RAValidityInput,
)
from mo_ldap_import_export.depends import GraphQLClient
from mo_ldap_import_export.environments.main import load_engagement
from mo_ldap_import_export.moapi import MOAPI
from mo_ldap_import_export.models import Engagement
from mo_ldap_import_export.models import Validity
from mo_ldap_import_export.utils import MO_TZ


@pytest.mark.integration_test
@pytest.mark.usefixtures("test_client")
async def test_load_engagement(
    mo_api: MOAPI,
    graphql_client: GraphQLClient,
    mo_person: UUID,
    mo_org_unit: UUID,
    ansat: UUID,
    jurist: UUID,
    primary: UUID,
) -> None:
    engagement = await graphql_client.engagement_create(
        input=EngagementCreateInput(
            user_key="foo",
            org_unit=mo_org_unit,
            person=mo_person,
            job_function=jurist,
            engagement_type=ansat,
            primary=primary,
            extension_1="one",
            extension_2="two",
            extension_3="three",
            extension_4="four",
            extension_5="five",
            extension_6="six",
            extension_7="seven",
            extension_8="otte",
            extension_9="nine",
            extension_10="ten",
            validity=RAValidityInput(
                from_=datetime(2020, 1, 1),
                to=datetime(2030, 1, 1),
            ),
        )
    )

    result = await load_engagement(mo_api, engagement.uuid)
    assert result is not None
    assert result == Engagement(
        uuid=engagement.uuid,
        user_key="foo",
        org_unit=mo_org_unit,
        person=mo_person,
        job_function=jurist,
        engagement_type=ansat,
        primary=primary,
        extension_1="one",
        extension_2="two",
        extension_3="three",
        extension_4="four",
        extension_5="five",
        extension_6="six",
        extension_7="seven",
        extension_8="otte",
        extension_9="nine",
        extension_10="ten",
        validity=Validity(
            start=datetime(2020, 1, 1, tzinfo=MO_TZ),
            end=datetime(2030, 1, 1, tzinfo=MO_TZ),
        ),
    )


@pytest.mark.integration_test
@pytest.mark.usefixtures("test_client")
async def test_load_engagement_terminated(
    mo_api: MOAPI,
    graphql_client: GraphQLClient,
    mo_person: UUID,
    mo_org_unit: UUID,
    ansat: UUID,
    jurist: UUID,
    primary: UUID,
) -> None:
    engagement = await graphql_client.engagement_create(
        input=EngagementCreateInput(
            user_key="foo",
            org_unit=mo_org_unit,
            person=mo_person,
            job_function=jurist,
            engagement_type=ansat,
            primary=primary,
            validity=RAValidityInput(
                from_=datetime(1990, 1, 1),
                to=datetime(2000, 1, 1),
            ),
        )
    )

    result = await load_engagement(mo_api, engagement.uuid)
    assert result is None
