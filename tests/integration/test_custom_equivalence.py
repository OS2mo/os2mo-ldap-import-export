# SPDX-FileCopyrightText: Magenta ApS <https://magenta.dk>
# SPDX-License-Identifier: MPL-2.0
import json
from datetime import datetime
from unittest.mock import ANY
from uuid import UUID

import pytest
from fastramqpi.pytest_util import retry
from ldap3 import Connection
from more_itertools import one

from mo_ldap_import_export.autogenerated_graphql_client import EmployeeFilter
from mo_ldap_import_export.autogenerated_graphql_client import EngagementFilter
from mo_ldap_import_export.autogenerated_graphql_client import GraphQLClient
from mo_ldap_import_export.autogenerated_graphql_client.input_types import (
    EngagementCreateInput,
)
from mo_ldap_import_export.ldap import ldap_add
from mo_ldap_import_export.ldap import ldap_modify
from mo_ldap_import_export.utils import MO_TZ
from mo_ldap_import_export.utils import combine_dn_strings


@pytest.mark.integration_test
@pytest.mark.usefixtures("test_client")
@pytest.mark.envvar(
    {
        "LISTEN_TO_CHANGES_IN_MO": "False",
        "LISTEN_TO_CHANGES_IN_LDAP": "True",
        "CONVERSION_MAPPING": json.dumps(
            {
                "ldap_to_mo": {
                    "Employee": {
                        "objectClass": "ramodels.mo.employee.Employee",
                        "_import_to_mo_": "false",
                        "_ldap_attributes_": [],
                        "uuid": "{{ employee_uuid or '' }}",  # TODO: why is this required?
                    },
                    "Engagement": {
                        "objectClass": "ramodels.mo.details.engagement.Engagement",
                        "_import_to_mo_": "true",
                        "_ldap_attributes_": ["title"],
                        "uuid": "{{ skip_if_none(load_mo_primary_engagement(employee_uuid)).uuid }}",
                        "user_key": "{{ skip_if_none(load_mo_primary_engagement(employee_uuid)).user_key }}",
                        "org_unit": "{{ skip_if_none(load_mo_primary_engagement(employee_uuid)).org_unit }}",
                        "person": "{{ skip_if_none(load_mo_primary_engagement(employee_uuid)).person }}",
                        "engagement_type": "{{ skip_if_none(load_mo_primary_engagement(employee_uuid)).engagement_type }}",
                        "primary": "{{ skip_if_none(load_mo_primary_engagement(employee_uuid)).primary }}",
                        "job_function": "{{ get_or_create_job_function_uuid(ldap.title, default='Medarbejder') or ''}}",
                    },
                },
                # TODO: why is this required?
                "username_generator": {
                    "objectClass": "UserNameGenerator",
                    "combinations_to_try": ["FFFX", "LLLX"],
                },
            }
        ),
    }
)
async def test_to_mo(
    graphql_client: GraphQLClient,
    mo_person: UUID,
    mo_org_unit: UUID,
    ldap_connection: Connection,
    ldap_org: list[str],
    ansat: UUID,
    jurist: UUID,
    primary: UUID,
) -> None:
    @retry()
    async def assert_engagement(expected: dict) -> None:
        engagements = await graphql_client._testing__engagement_read(
            filter=EngagementFilter(
                employee=EmployeeFilter(uuids=[mo_person]),
            ),
        )
        engagement = one(engagements.objects)
        validities = one(engagement.validities)
        assert validities.dict() == expected

    # MO: Create
    await graphql_client.engagement_create(
        input=EngagementCreateInput(
            user_key="Engagement",
            person=mo_person,
            org_unit=mo_org_unit,
            engagement_type=ansat,
            job_function=jurist,
            primary=primary,
            validity={"from": "2001-02-03T04:05:06Z"},
        )
    )
    mo_engagement = {
        "uuid": ANY,
        "user_key": "Engagement",
        "person": [{"uuid": mo_person}],
        "org_unit": [{"uuid": mo_org_unit}],
        "engagement_type": {"user_key": "Ansat"},
        "job_function": {"user_key": "Jurist"},
        "primary": {"user_key": "primary"},
        "validity": {"from_": datetime(2001, 2, 3, 0, 0, tzinfo=MO_TZ), "to": None},
        "extension_1": None,
    }
    await assert_engagement(mo_engagement)

    person_dn = combine_dn_strings(["uid=abk"] + ldap_org)

    # LDAP: Create updates value
    title = "create"
    await ldap_add(
        ldap_connection,
        dn=person_dn,
        object_class=["top", "person", "organizationalPerson", "inetOrgPerson"],
        attributes={
            "objectClass": ["top", "person", "organizationalPerson", "inetOrgPerson"],
            "ou": "os2mo",
            "cn": "Aage Bach Klarskov",
            "sn": "Bach Klarskov",
            "employeeNumber": "2108613133",
            "title": title,
            "departmentNumber": str(mo_org_unit),
        },
    )

    mo_engagement = {
        **mo_engagement,
        "job_function": {"user_key": "create"},
    }
    await assert_engagement(mo_engagement)

    # LDAP: Modify updates value
    await ldap_modify(
        ldap_connection,
        dn=person_dn,
        changes={
            "title": [("MODIFY_REPLACE", "edit")],
        },
    )
    mo_engagement = {
        **mo_engagement,
        "job_function": {"user_key": "edit"},
    }
    await assert_engagement(mo_engagement)

    # LDAP: Empty value, yields fallback
    await ldap_modify(
        ldap_connection,
        dn=person_dn,
        changes={
            "title": [("MODIFY_REPLACE", [])],
        },
    )
    mo_engagement = {
        **mo_engagement,
        "job_function": {"user_key": "Medarbejder"},
    }
    await assert_engagement(mo_engagement)
