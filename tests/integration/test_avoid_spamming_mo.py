# SPDX-FileCopyrightText: Magenta ApS <https://magenta.dk>
# SPDX-License-Identifier: MPL-2.0
import json
from collections.abc import Awaitable
from collections.abc import Callable
from uuid import UUID

import pytest
from ldap3 import Connection
from more_itertools import one

from mo_ldap_import_export.autogenerated_graphql_client import GraphQLClient
from mo_ldap_import_export.ldap import ldap_modify
from mo_ldap_import_export.ldapapi import LDAPAPI
from mo_ldap_import_export.types import DN


@pytest.mark.integration_test
@pytest.mark.envvar(
    {
        "LISTEN_TO_CHANGES_IN_MO": "False",
        "LISTEN_TO_CHANGES_IN_LDAP": "False",
        "CONVERSION_MAPPING": json.dumps(
            {
                "ldap_to_mo": {
                    "Employee": {
                        "objectClass": "Employee",
                        "_import_to_mo_": "true",
                        "_ldap_attributes_": ["employeeNumber", "givenName", "sn"],
                        "uuid": "{{ employee_uuid or '' }}",  # TODO: why is this required?
                        "cpr_number": "{{ ldap.employeeNumber }}",
                        "given_name": "{{ ldap.givenName }}",
                        "surname": "{{ ldap.sn }}",
                    },
                },
                # TODO: why is this required?
                "username_generator": {
                    "combinations_to_try": ["FFFX", "LLLX"],
                },
            }
        ),
    }
)
async def test_no_registration_spam(
    trigger_ldap_person: Callable[[], Awaitable[None]],
    ldap_connection: Connection,
    ldap_person_dn: DN,
    graphql_client: GraphQLClient,
    mo_person: UUID,
) -> None:
    async def get_registration_count() -> int:
        result = await graphql_client.read_employee_registrations(mo_person)
        employee = one(result.objects)
        return len(employee.registrations)

    # Check precondition
    assert (await get_registration_count()) == 1

    # Trigger NOOP resyncs
    await trigger_ldap_person()
    assert (await get_registration_count()) == 1

    await trigger_ldap_person()
    assert (await get_registration_count()) == 1

    # Make an actual change and trigger a true sync
    await ldap_modify(
        ldap_connection,
        dn=ldap_person_dn,
        changes={
            "givenName": [("MODIFY_REPLACE", "Hello World")],
        },
    )

    await trigger_ldap_person()
    assert (await get_registration_count()) == 2

    await trigger_ldap_person()
    assert (await get_registration_count()) == 2


@pytest.mark.integration_test
@pytest.mark.envvar(
    {
        "LISTEN_TO_CHANGES_IN_MO": "False",
        "LISTEN_TO_CHANGES_IN_LDAP": "False",
        "CONVERSION_MAPPING": json.dumps(
            {
                "ldap_to_mo": {
                    "Employee": {
                        "objectClass": "Employee",
                        "_import_to_mo_": "true",
                        "_ldap_attributes_": [
                            "employeeNumber",
                            "givenName",
                            "sn",
                            "uid",
                        ],
                        "uuid": "{{ employee_uuid or '' }}",  # TODO: why is this required?
                        "cpr_number": "{{ ldap.employeeNumber }}",
                        "given_name": "{{ ldap.givenName }}",
                        "surname": "{{ ldap.sn }}",
                        "user_key": "{{ ldap.uid }}",
                    },
                },
                # TODO: why is this required?
                "username_generator": {
                    "combinations_to_try": ["FFFX", "LLLX"],
                },
            }
        ),
    }
)
async def test_no_registration_spam_user_key(
    trigger_ldap_person: Callable[[], Awaitable[None]],
    ldap_api: LDAPAPI,
    ldap_person_dn: DN,
    graphql_client: GraphQLClient,
    mo_person: UUID,
) -> None:
    async def get_registration_count() -> int:
        result = await graphql_client.read_employee_registrations(mo_person)
        employee = one(result.objects)
        return len(employee.registrations)

    # Check precondition
    assert (await get_registration_count()) == 1

    # Trigger initial synchronization
    await trigger_ldap_person()
    assert (await get_registration_count()) == 2

    # Trigger NOOP resyncs
    await trigger_ldap_person()
    assert (await get_registration_count()) == 2

    await trigger_ldap_person()
    assert (await get_registration_count()) == 2

    # Make an actual change and trigger a true sync
    await ldap_api.ldap_connection.ldap_modify_dn(
        dn=ldap_person_dn, relative_dn="uid=bach"
    )

    await trigger_ldap_person()
    assert (await get_registration_count()) == 3

    await trigger_ldap_person()
    assert (await get_registration_count()) == 3


@pytest.mark.integration_test
@pytest.mark.envvar(
    {
        "LISTEN_TO_CHANGES_IN_MO": "False",
        "LISTEN_TO_CHANGES_IN_LDAP": "False",
        "CONVERSION_MAPPING": json.dumps(
            {
                "ldap_to_mo": {
                    "Employee": {
                        "objectClass": "Employee",
                        "_import_to_mo_": "true",
                        "_ldap_attributes_": [
                            "employeeNumber",
                            "givenName",
                            "sn",
                            "carLicense",
                        ],
                        "uuid": "{{ employee_uuid or '' }}",  # TODO: why is this required?
                        "cpr_number": "{{ ldap.employeeNumber }}",
                        "given_name": "{{ ldap.givenName }}",
                        "surname": "{{ ldap.sn }}",
                        "nickname_given_name": "{{ ldap.carLicense }}",
                        "nickname_surname": "{{ ldap.carLicense }}",
                    },
                },
                # TODO: why is this required?
                "username_generator": {
                    "combinations_to_try": ["FFFX", "LLLX"],
                },
            }
        ),
    }
)
async def test_no_registration_spam_nickname(
    trigger_ldap_person: Callable[[], Awaitable[None]],
    ldap_connection: Connection,
    ldap_person_dn: DN,
    graphql_client: GraphQLClient,
    mo_person: UUID,
) -> None:
    async def get_registration_count() -> int:
        result = await graphql_client.read_employee_registrations(mo_person)
        employee = one(result.objects)
        return len(employee.registrations)

    # Check precondition
    assert (await get_registration_count()) == 1

    # Trigger NOOP resyncs
    await trigger_ldap_person()
    assert (await get_registration_count()) == 1

    await trigger_ldap_person()
    assert (await get_registration_count()) == 1

    # Make an actual change and trigger a true sync
    await ldap_modify(
        ldap_connection,
        dn=ldap_person_dn,
        changes={
            "carLicense": [("MODIFY_REPLACE", "NEW")],
        },
    )

    await trigger_ldap_person()
    assert (await get_registration_count()) == 2

    await trigger_ldap_person()
    assert (await get_registration_count()) == 2
