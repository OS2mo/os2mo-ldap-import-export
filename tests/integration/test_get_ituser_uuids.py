# SPDX-FileCopyrightText: Magenta ApS <https://magenta.dk>
# SPDX-License-Identifier: MPL-2.0
from typing import Any
from uuid import UUID

import pytest

from mo_ldap_import_export.autogenerated_graphql_client.client import GraphQLClient
from mo_ldap_import_export.autogenerated_graphql_client.input_types import (
    ITSystemCreateInput,
)
from mo_ldap_import_export.autogenerated_graphql_client.input_types import (
    ITUserCreateInput,
)
from mo_ldap_import_export.autogenerated_graphql_client.input_types import (
    RAOpenValidityInput,
)
from mo_ldap_import_export.autogenerated_graphql_client.input_types import (
    RAValidityInput,
)
from mo_ldap_import_export.environments.main import get_ituser_uuid
from mo_ldap_import_export.environments.main import get_ituser_uuids


@pytest.mark.integration_test
@pytest.mark.usefixtures("test_client")
async def test_integration_get_org_unit_path_string(
    graphql_client: GraphQLClient,
    mo_person: UUID,
) -> None:
    itsystem = await graphql_client.itsystem_create(
        input=ITSystemCreateInput(
            user_key="BorgerPC", name="BorgerPC", validity=RAOpenValidityInput()
        )
    )

    kwargs: dict[str, Any] = {
        "graphql_client": graphql_client,
        "filter": {"itsystem": {"uuid": [itsystem.uuid]}},
    }
    result: Any

    result = await get_ituser_uuids(**kwargs)
    assert result == set()
    result = await get_ituser_uuid(**kwargs)
    assert result is None

    # Add an ITUser
    user1 = await graphql_client.ituser_create(
        ITUserCreateInput(
            person=mo_person,
            user_key="user1",
            itsystem=itsystem.uuid,
            validity=RAValidityInput(from_="1970-01-01T00:00:00"),
        )
    )

    result = await get_ituser_uuids(**kwargs)
    assert result == {user1.uuid}
    result = await get_ituser_uuid(**kwargs)
    assert result == user1.uuid

    # Add another ITUser
    user2 = await graphql_client.ituser_create(
        ITUserCreateInput(
            person=mo_person,
            user_key="user2",
            itsystem=itsystem.uuid,
            validity=RAValidityInput(from_="1970-01-01T00:00:00"),
        )
    )

    result = await get_ituser_uuids(**kwargs)
    assert result == {user1.uuid, user2.uuid}
    with pytest.raises(ValueError) as exc_info:
        await get_ituser_uuid(**kwargs)
    assert "Expected exactly one item in iterable, but got" in str(exc_info.value)
    assert str(user1.uuid) in str(exc_info.value)
    assert str(user2.uuid) in str(exc_info.value)

    # Add yet another ITUser
    user3 = await graphql_client.ituser_create(
        ITUserCreateInput(
            person=mo_person,
            user_key="user2",
            itsystem=itsystem.uuid,
            validity=RAValidityInput(from_="1970-01-01T00:00:00"),
        )
    )

    result = await get_ituser_uuids(**kwargs)
    assert result == {user1.uuid, user2.uuid, user3.uuid}
    with pytest.raises(ValueError) as exc_info:
        await get_ituser_uuid(**kwargs)
    assert "Expected exactly one item in iterable, but got" in str(exc_info.value)
