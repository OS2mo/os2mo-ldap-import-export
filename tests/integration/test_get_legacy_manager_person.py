# SPDX-FileCopyrightText: Magenta ApS <https://magenta.dk>
# SPDX-License-Identifier: MPL-2.0

from collections.abc import Awaitable
from collections.abc import Callable
from datetime import datetime
from typing import TypeAlias
from uuid import UUID
from uuid import uuid4

import pytest

from mo_ldap_import_export.autogenerated_graphql_client.client import GraphQLClient
from mo_ldap_import_export.autogenerated_graphql_client.exceptions import (
    GraphQLClientGraphQLMultiError,
)
from mo_ldap_import_export.autogenerated_graphql_client.input_types import (
    EmployeeCreateInput,
)
from mo_ldap_import_export.autogenerated_graphql_client.input_types import (
    EngagementCreateInput,
)
from mo_ldap_import_export.autogenerated_graphql_client.input_types import (
    ManagerCreateInput,
)
from mo_ldap_import_export.autogenerated_graphql_client.input_types import ManagerFilter
from mo_ldap_import_export.autogenerated_graphql_client.input_types import (
    OrganisationUnitCreateInput,
)
from mo_ldap_import_export.autogenerated_graphql_client.input_types import (
    OrganisationUnitFilter,
)
from mo_ldap_import_export.environments.main import get_legacy_manager_for_org_unit
from mo_ldap_import_export.environments.main import get_legacy_manager_person_uuid
from mo_ldap_import_export.environments.main import get_legacy_manager_person_uuids
from mo_ldap_import_export.moapi import MOAPI
from mo_ldap_import_export.types import EmployeeUUID
from mo_ldap_import_export.types import EngagementUUID
from mo_ldap_import_export.types import ManagerUUID
from mo_ldap_import_export.types import OrgUnitUUID

CreateEngagement: TypeAlias = Callable[
    [datetime | None, datetime | None, OrgUnitUUID | None], Awaitable[EngagementUUID]
]


@pytest.fixture
async def create_engagement(
    graphql_client: GraphQLClient,
    mo_person: UUID,
    mo_org_unit: UUID,
    ansat: UUID,
    jurist: UUID,
    primary: UUID,
) -> CreateEngagement:
    async def inner(
        start: datetime | None, end: datetime | None, org_unit: OrgUnitUUID | None
    ) -> EngagementUUID:
        engagement = await graphql_client.engagement_create(
            input=EngagementCreateInput(
                user_key="engagement",
                person=mo_person,
                org_unit=org_unit or mo_org_unit,
                engagement_type=ansat,
                job_function=jurist,
                primary=primary,
                validity={"from": start, "to": end},
            )
        )
        return EngagementUUID(engagement.uuid)

    return inner


CreateManager: TypeAlias = Callable[
    [EmployeeUUID | None, datetime | None, datetime | None, OrgUnitUUID | None],
    Awaitable[ManagerUUID],
]


@pytest.fixture
async def create_manager(
    graphql_client: GraphQLClient, mo_org_unit: UUID
) -> CreateManager:
    async def inner(
        person: EmployeeUUID | None,
        start: datetime | None,
        end: datetime | None,
        org_unit: OrgUnitUUID | None,
    ) -> ManagerUUID:
        manager = await graphql_client._testing__manager_create(
            ManagerCreateInput(
                user_key="vacant",
                org_unit=org_unit or mo_org_unit,
                responsibility=[],
                manager_level=uuid4(),
                manager_type=uuid4(),
                person=person,
                validity={"from": start, "to": end},
            )
        )
        return ManagerUUID(manager.uuid)

    return inner


CreateOrgUnit: TypeAlias = Callable[[OrgUnitUUID | None], Awaitable[OrgUnitUUID]]


@pytest.fixture
async def create_org_unit(
    graphql_client: GraphQLClient,
    afdeling: UUID,
) -> CreateOrgUnit:
    async def creator(parent: OrgUnitUUID | None = None) -> OrgUnitUUID:
        org_unit_uuid = uuid4()
        result = await graphql_client.org_unit_create(
            OrganisationUnitCreateInput(
                uuid=org_unit_uuid,
                name=str(org_unit_uuid),
                user_key=str(org_unit_uuid),
                parent=parent,
                org_unit_type=afdeling,
                validity={"from": "1970-01-01T00:00:00"},
            )
        )
        return OrgUnitUUID(result.uuid)

    return creator


@pytest.mark.integration_test
async def test_get_legacy_manager_person_uuids_no_org_filter(
    graphql_client: GraphQLClient,
) -> None:
    with pytest.raises(GraphQLClientGraphQLMultiError) as exc_info:
        {
            item
            async for item in get_legacy_manager_person_uuids(
                graphql_client, ManagerFilter()
            )
        }
    assert (
        str(exc_info.value) == "The inherit flag requires an organizational unit filter"
    )


@pytest.mark.integration_test
async def test_get_legacy_manager_person_uuids(
    graphql_client: GraphQLClient,
) -> None:
    result = {
        item
        async for item in get_legacy_manager_person_uuids(
            graphql_client, ManagerFilter(org_unit=OrganisationUnitFilter())
        )
    }
    assert result == set()


@pytest.mark.integration_test
@pytest.mark.parametrize(
    "manager_start,manager_end,found_manager",
    [
        # Current
        (datetime(2000, 1, 1), None, True),
        # Past
        (datetime(2000, 1, 1), datetime(2010, 1, 1), False),
        # Future
        (datetime(3000, 1, 1), None, False),
    ],
)
async def test_get_legacy_manager_person_uuids_only_current(
    graphql_client: GraphQLClient,
    mo_person: EmployeeUUID,
    create_manager: CreateManager,
    manager_start: datetime,
    manager_end: datetime | None,
    found_manager: bool,
) -> None:
    await create_manager(mo_person, manager_start, manager_end, None)

    result = {
        item
        async for item in get_legacy_manager_person_uuids(
            graphql_client, ManagerFilter(org_unit=OrganisationUnitFilter())
        )
    }
    assert result == ({mo_person} if found_manager else set())


@pytest.mark.integration_test
@pytest.mark.parametrize(
    "manager_start,manager_end,found_manager",
    [
        # Current
        (datetime(2000, 1, 1), None, True),
        # Past
        (datetime(2000, 1, 1), datetime(2010, 1, 1), False),
        # Future
        (datetime(3000, 1, 1), None, False),
    ],
)
async def test_get_legacy_manager_person_uuids_vacant_manager(
    graphql_client: GraphQLClient,
    create_manager: CreateManager,
    manager_start: datetime,
    manager_end: datetime | None,
    found_manager: bool,
) -> None:
    await create_manager(None, manager_start, manager_end, None)

    result = {
        item
        async for item in get_legacy_manager_person_uuids(
            graphql_client, ManagerFilter(org_unit=OrganisationUnitFilter())
        )
    }
    assert result == ({None} if found_manager else set())


@pytest.mark.integration_test
async def test_get_legacy_manager_person_uuids_multiple_managers(
    graphql_client: GraphQLClient,
    create_manager: CreateManager,
) -> None:
    person1 = await graphql_client.person_create(
        input=EmployeeCreateInput(
            given_name="First",
            surname="Manager",
            cpr_number="0101700000",
        )
    )
    await create_manager(EmployeeUUID(person1.uuid), datetime(2000, 1, 1), None, None)

    person2 = await graphql_client.person_create(
        input=EmployeeCreateInput(
            given_name="First",
            surname="Manager",
            cpr_number="0101700001",
        )
    )
    await create_manager(EmployeeUUID(person2.uuid), datetime(2000, 1, 1), None, None)

    result = {
        item
        async for item in get_legacy_manager_person_uuids(
            graphql_client, ManagerFilter(org_unit=OrganisationUnitFilter())
        )
    }
    assert result == {person1.uuid, person2.uuid}


@pytest.mark.integration_test
async def test_get_legacy_manager_for_org_unit_unknown(
    graphql_client: GraphQLClient,
) -> None:
    # Random UUID
    uuid = UUID("31c397f2-4303-4e41-9eca-49368ba47bbc")

    # TODO: Should this actually raise like this on unknown org-units?
    # NOTE: This also occurs if no manager exists anywhere in the hierarchy
    with pytest.raises(ValueError) as exc_info:
        await get_legacy_manager_for_org_unit(graphql_client, OrgUnitUUID(uuid))
    assert str(exc_info.value) == "max() arg is an empty sequence"


@pytest.mark.integration_test
async def test_get_legacy_manager_for_org_unit_vacant(
    graphql_client: GraphQLClient,
    create_manager: CreateManager,
    mo_org_unit: OrgUnitUUID,
) -> None:
    await create_manager(None, datetime(2000, 1, 1), None, None)
    result = await get_legacy_manager_for_org_unit(graphql_client, mo_org_unit)
    assert result is None


@pytest.mark.integration_test
async def test_get_legacy_manager_for_org_unit(
    graphql_client: GraphQLClient,
    create_manager: CreateManager,
    mo_org_unit: OrgUnitUUID,
) -> None:
    # Vacant is ignored when non-vacant
    await create_manager(None, datetime(2000, 1, 1), None, None)

    person1 = await graphql_client.person_create(
        input=EmployeeCreateInput(
            given_name="First",
            surname="Manager",
            cpr_number="0101700000",
        )
    )
    await create_manager(EmployeeUUID(person1.uuid), datetime(2000, 1, 1), None, None)

    person2 = await graphql_client.person_create(
        input=EmployeeCreateInput(
            given_name="First",
            surname="Manager",
            cpr_number="0101700001",
        )
    )
    await create_manager(EmployeeUUID(person2.uuid), datetime(2000, 1, 1), None, None)

    highest_person_uuid = max(person1.uuid, person2.uuid)

    result = await get_legacy_manager_for_org_unit(graphql_client, mo_org_unit)
    assert result == highest_person_uuid


@pytest.mark.integration_test
async def test_get_legacy_manager_person_uuid_unknown(
    mo_api: MOAPI,
) -> None:
    # Random UUID
    uuid = UUID("14bfe476-1d0a-44a4-a8c2-71ce95d770f9")
    result = await get_legacy_manager_person_uuid(mo_api, EmployeeUUID(uuid))
    assert result is None


@pytest.mark.integration_test
async def test_get_legacy_manager_person_uuid_no_engagement(
    mo_api: MOAPI,
    mo_person: EmployeeUUID,
) -> None:
    result = await get_legacy_manager_person_uuid(mo_api, mo_person)
    assert result is None


@pytest.mark.integration_test
async def test_get_legacy_manager_person_uuid_engagement(
    mo_api: MOAPI,
    mo_person: EmployeeUUID,
    create_engagement: CreateEngagement,
) -> None:
    await create_engagement(datetime(2000, 1, 1), None, None)

    # TODO: Should this actually raise like this on missing managers?
    with pytest.raises(ValueError) as exc_info:
        await get_legacy_manager_person_uuid(mo_api, mo_person)
    assert str(exc_info.value) == "max() arg is an empty sequence"


@pytest.mark.integration_test
async def test_get_legacy_manager_person_uuid_vacant(
    mo_api: MOAPI,
    mo_person: EmployeeUUID,
    create_engagement: CreateEngagement,
    create_manager: CreateManager,
) -> None:
    await create_engagement(datetime(2000, 1, 1), None, None)
    await create_manager(None, datetime(2000, 1, 1), None, None)

    result = await get_legacy_manager_person_uuid(mo_api, mo_person)
    assert result is None


@pytest.mark.integration_test
async def test_get_legacy_manager_person_uuid_self_manager(
    mo_api: MOAPI,
    mo_person: EmployeeUUID,
    create_engagement: CreateEngagement,
    create_manager: CreateManager,
) -> None:
    await create_engagement(datetime(2000, 1, 1), None, None)
    await create_manager(mo_person, datetime(2000, 1, 1), None, None)

    result = await get_legacy_manager_person_uuid(mo_api, mo_person)
    assert result == mo_person


@pytest.mark.integration_test
async def test_get_legacy_manager_person_uuid_self_manager_top(
    mo_api: MOAPI,
    mo_person: EmployeeUUID,
    mo_org_unit: OrgUnitUUID,
    create_org_unit: CreateOrgUnit,
    create_engagement: CreateEngagement,
    create_manager: CreateManager,
) -> None:
    # We are hired in the child org-unit, but are manager in the above org-unit
    child_org_unit = await create_org_unit(mo_org_unit)
    await create_engagement(datetime(2000, 1, 1), None, child_org_unit)
    await create_manager(mo_person, datetime(2000, 1, 1), None, None)

    result = await get_legacy_manager_person_uuid(mo_api, mo_person)
    assert result == mo_person


@pytest.mark.integration_test
async def test_get_legacy_manager_person_uuid_manager(
    mo_api: MOAPI,
    mo_person: EmployeeUUID,
    create_engagement: CreateEngagement,
    create_manager: CreateManager,
) -> None:
    await create_engagement(datetime(2000, 1, 1), None, None)

    person1 = await mo_api.graphql_client.person_create(
        input=EmployeeCreateInput(
            given_name="First",
            surname="Manager",
            cpr_number="0101700000",
        )
    )
    await create_manager(EmployeeUUID(person1.uuid), datetime(2000, 1, 1), None, None)

    result = await get_legacy_manager_person_uuid(mo_api, mo_person)
    assert result == person1.uuid


@pytest.mark.integration_test
async def test_get_legacy_manager_person_uuid_inherit(
    mo_api: MOAPI,
    mo_person: EmployeeUUID,
    mo_org_unit: OrgUnitUUID,
    create_org_unit: CreateOrgUnit,
    create_engagement: CreateEngagement,
    create_manager: CreateManager,
) -> None:
    # We are hired in the child org-unit, where we are also the manager
    child_org_unit = await create_org_unit(mo_org_unit)
    await create_engagement(datetime(2000, 1, 1), None, child_org_unit)
    await create_manager(mo_person, datetime(2000, 1, 1), None, child_org_unit)

    # This person is manager in the parent org-unit
    person1 = await mo_api.graphql_client.person_create(
        input=EmployeeCreateInput(
            given_name="Top",
            surname="Manager",
            cpr_number="0101700000",
        )
    )
    await create_manager(EmployeeUUID(person1.uuid), datetime(2000, 1, 1), None, None)

    # Cannot have ourselves as manager if another manager is above us
    result = await get_legacy_manager_person_uuid(mo_api, mo_person)
    assert result == person1.uuid


@pytest.mark.integration_test
async def test_get_legacy_manager_person_uuid_no_inherit(
    mo_api: MOAPI,
    mo_person: EmployeeUUID,
    mo_org_unit: OrgUnitUUID,
    create_org_unit: CreateOrgUnit,
    create_engagement: CreateEngagement,
    create_manager: CreateManager,
) -> None:
    # We are hired in the child org-unit, where we are also the manager
    child_org_unit = await create_org_unit(mo_org_unit)
    await create_engagement(datetime(2000, 1, 1), None, child_org_unit)

    # This manager is manager in the child org-unit, so we do not need to inherit
    person1 = await mo_api.graphql_client.person_create(
        input=EmployeeCreateInput(
            given_name="Child",
            surname="Manager",
            cpr_number="0101700000",
        )
    )
    await create_manager(
        EmployeeUUID(person1.uuid), datetime(2000, 1, 1), None, child_org_unit
    )

    # This person is manager in the parent org-unit
    person2 = await mo_api.graphql_client.person_create(
        input=EmployeeCreateInput(
            given_name="Top",
            surname="Manager",
            cpr_number="0101700001",
        )
    )
    await create_manager(EmployeeUUID(person2.uuid), datetime(2000, 1, 1), None, None)

    # Cannot have ourselves as manager if another manager is above us
    result = await get_legacy_manager_person_uuid(mo_api, mo_person)
    assert result == person1.uuid
