# SPDX-FileCopyrightText: Magenta ApS <https://magenta.dk>
# SPDX-License-Identifier: MPL-2.0
import json
from collections.abc import Awaitable
from collections.abc import Callable
from uuid import UUID

import pytest
from more_itertools import one

from mo_ldap_import_export.autogenerated_graphql_client import GraphQLClient
from mo_ldap_import_export.autogenerated_graphql_client.input_types import (
    ClassCreateInput,
)
from mo_ldap_import_export.autogenerated_graphql_client.input_types import (
    EmployeeCreateInput,
)
from mo_ldap_import_export.autogenerated_graphql_client.input_types import FacetFilter
from mo_ldap_import_export.autogenerated_graphql_client.input_types import (
    ITSystemCreateInput,
)
from mo_ldap_import_export.autogenerated_graphql_client.input_types import (
    ITUserCreateInput,
)
from mo_ldap_import_export.autogenerated_graphql_client.input_types import (
    RoleBindingCreateInput,
)
from mo_ldap_import_export.ldapapi import LDAPAPI
from mo_ldap_import_export.types import CPRNumber
from tests.integration.conftest import AnyOrder


@pytest.mark.integration_test
@pytest.mark.envvar(
    {
        "LISTEN_TO_CHANGES_IN_MO": "False",
        "LISTEN_TO_CHANGES_IN_LDAP": "False",
        "LDAP_CPR_ATTRIBUTE": "employeeNumber",
        "CONVERSION_MAPPING": json.dumps(
            {
                "mo_to_ldap": [
                    # Itsystem to group mapping
                    {
                        "identifier": "itsystem2group",
                        "routing_key": "itsystem",
                        "object_class": "groupOfNames",
                        "template": """
                    {% set itsystem_key = skip_if_none(get_itsystem(uuid)).user_key %}

                    {% set dn = "cn=" + itsystem_key + "_users,dc=magenta,dc=dk" %}
                    {% set person_uuids = itsystem_uuid_to_person_uuids(uuid) %}
                    {% set dns = person_uuids|map('get_person_dn')|list %}

                    {% set exists = dn|dn_exists %}

                    {{
                        {
                            "dn": dn,
                            "create": not exists,
                            "attributes": {"member": dns}
                        }|tojson
                    }}
                """,
                    },
                    # Role to group mapping
                    {
                        "identifier": "role2group",
                        "routing_key": "class",
                        "object_class": "groupOfNames",
                        "template": """
                    {% set role_key = skip_if_none(get_class(uuid)).user_key %}

                    {% set itsystem_uuid = skip_if_none(get_class(uuid).it_system) %}
                    {% set itsystem_key = get_itsystem(itsystem_uuid).user_key %}

                    {% set dn = "cn=" + itsystem_key + "_" + role_key + ",dc=magenta,dc=dk" %}

                    {% set person_uuids = role_uuid_to_person_uuids(uuid) %}
                    {% set dns = person_uuids|map('get_person_dn')|list %}

                    {% set exists = dn|dn_exists %}

                    {{
                        {
                            "dn": dn,
                            "create": not exists,
                            "attributes": {"member": dns}
                        }|tojson
                    }}
                """,
                    },
                    # Person to inetOrgPerson mapping
                    {
                        "identifier": "person2person",
                        "routing_key": "person",
                        "object_class": "inetOrgPerson",
                        "template": """
                    {% set mo_employee = load_mo_employee(uuid, current_objects_only=False) %}
                    {% set dn = get_person_dn(uuid) %}
                    {% set create = False %}
                    {% if not dn %}
                        {% set dn = generate_dn(uuid, mo_employee.cpr_number) %}
                        {% set create = True %}
                    {% endif %}

                    {{
                        {
                            "dn": dn,
                            "create": create,
                            "attributes": {
                                "employeeNumber": mo_employee.cpr_number,
                                "uid": mo_employee.cpr_number,
                                "cn": mo_employee.cpr_number,
                                "sn": mo_employee.surname,
                                "givenName": mo_employee.given_name,
                            }
                        }|tojson
                    }}
                """,
                    },
                ],
                "username_generator": {
                    "combinations_to_try": ["FFFX", "LLLX"],
                },
            }
        ),
    }
)
@pytest.mark.usefixtures("ldap_org_unit")
async def test_rolebinding_sync(
    trigger_mo_to_ldap_sync: Callable[[str, UUID], Awaitable[None]],
    ldap_api: LDAPAPI,
    graphql_client: GraphQLClient,
) -> None:
    borgerpc = await graphql_client.itsystem_create(
        input=ITSystemCreateInput(
            user_key="borgerpc",
            name="BorgerPC",
            validity={"from": "2001-02-03T04:05:06Z"},
        )
    )

    # Create roles
    result = await graphql_client.read_facet_uuid(
        filter=FacetFilter(user_keys=["role"])
    )
    role = one(result.objects)
    owner = await graphql_client.class_create(
        input=ClassCreateInput(
            name="owner",
            user_key="owner",
            scope="TEXT",
            facet_uuid=role.uuid,
            it_system_uuid=borgerpc.uuid,
            validity={"from": "2001-02-03T04:05:06Z"},
        )
    )
    admin = await graphql_client.class_create(
        input=ClassCreateInput(
            name="admin",
            user_key="admin",
            scope="TEXT",
            facet_uuid=role.uuid,
            it_system_uuid=borgerpc.uuid,
            validity={"from": "2001-02-03T04:05:06Z"},
        )
    )

    # Create Alvida
    alvida_cpr = "0101701234"
    alvida = await graphql_client.person_create(
        input=EmployeeCreateInput(
            given_name="Alvida",
            surname="Niba",
            cpr_number=alvida_cpr,
        )
    )
    alvida_bpc = await graphql_client.ituser_create(
        input=ITUserCreateInput(
            user_key="alvida",
            itsystem=borgerpc.uuid,
            person=alvida.uuid,
            validity={"from": "2001-02-03T04:05:06Z"},
        )
    )
    await graphql_client._testing__rolebinding_create(
        input=RoleBindingCreateInput(
            user_key="alvida_admin",
            ituser=alvida_bpc.uuid,
            role=admin.uuid,
            validity={"from": "2001-02-03T04:05:06Z"},
        )
    )

    # Create Eline
    eline_cpr = "0910854828"
    eline = await graphql_client.person_create(
        input=EmployeeCreateInput(
            given_name="Eline",
            surname="Wedsgaard Christensen",
            cpr_number=eline_cpr,
        )
    )
    eline_bpc = await graphql_client.ituser_create(
        input=ITUserCreateInput(
            user_key="eline",
            itsystem=borgerpc.uuid,
            person=eline.uuid,
            validity={"from": "2001-02-03T04:05:06Z"},
        )
    )
    await graphql_client._testing__rolebinding_create(
        input=RoleBindingCreateInput(
            user_key="eline_owner",
            ituser=eline_bpc.uuid,
            role=owner.uuid,
            validity={"from": "2001-02-03T04:05:06Z"},
        )
    )

    # Create bruce
    bruce_cpr = "2711400213"
    bruce = await graphql_client.person_create(
        input=EmployeeCreateInput(
            given_name="Bruce",
            surname="Lee",
            cpr_number=bruce_cpr,
        )
    )
    await graphql_client.ituser_create(
        input=ITUserCreateInput(
            user_key="bruce",
            itsystem=borgerpc.uuid,
            person=bruce.uuid,
            validity={"from": "2001-02-03T04:05:06Z"},
        )
    )

    # Create magnus
    magnus_cpr = "0708850225"
    magnus = await graphql_client.person_create(
        input=EmployeeCreateInput(
            given_name="Magnus",
            surname="Andersen",
            cpr_number=magnus_cpr,
        )
    )
    magnus_bpc = await graphql_client.ituser_create(
        input=ITUserCreateInput(
            user_key="magnus",
            itsystem=borgerpc.uuid,
            person=magnus.uuid,
            validity={"from": "2001-02-03T04:05:06Z"},
        )
    )
    await graphql_client._testing__rolebinding_create(
        input=RoleBindingCreateInput(
            user_key="magnus_admin",
            ituser=magnus_bpc.uuid,
            role=admin.uuid,
            validity={"from": "2001-02-03T04:05:06Z"},
        )
    )
    await graphql_client._testing__rolebinding_create(
        input=RoleBindingCreateInput(
            user_key="magnus_owner",
            ituser=magnus_bpc.uuid,
            role=owner.uuid,
            validity={"from": "2001-02-03T04:05:06Z"},
        )
    )

    # Trigger a synchronization to create users
    await trigger_mo_to_ldap_sync("person2person", alvida.uuid)
    await trigger_mo_to_ldap_sync("person2person", eline.uuid)
    await trigger_mo_to_ldap_sync("person2person", bruce.uuid)
    await trigger_mo_to_ldap_sync("person2person", magnus.uuid)

    # Fetch DNs for users
    alvida_dn = one(await ldap_api.cpr2dns(CPRNumber(alvida_cpr)))
    assert alvida_dn == f"cn={alvida_cpr},ou=os2mo,o=magenta,dc=magenta,dc=dk"
    eline_dn = one(await ldap_api.cpr2dns(CPRNumber(eline_cpr)))
    assert eline_dn == f"cn={eline_cpr},ou=os2mo,o=magenta,dc=magenta,dc=dk"
    bruce_dn = one(await ldap_api.cpr2dns(CPRNumber(bruce_cpr)))
    assert bruce_dn == f"cn={bruce_cpr},ou=os2mo,o=magenta,dc=magenta,dc=dk"
    magnus_dn = one(await ldap_api.cpr2dns(CPRNumber(magnus_cpr)))
    assert magnus_dn == f"cn={magnus_cpr},ou=os2mo,o=magenta,dc=magenta,dc=dk"

    # Trigger a full synchronization
    await trigger_mo_to_ldap_sync("itsystem2group", borgerpc.uuid)
    await trigger_mo_to_ldap_sync("role2group", admin.uuid)
    await trigger_mo_to_ldap_sync("role2group", owner.uuid)

    bpc_user_group_dn = "cn=borgerpc_users,dc=magenta,dc=dk"
    bpc_user_group = await ldap_api.get_object_by_dn(bpc_user_group_dn)
    assert hasattr(bpc_user_group, "objectClass")
    assert hasattr(bpc_user_group, "cn")
    assert hasattr(bpc_user_group, "member")
    assert bpc_user_group.dn == bpc_user_group_dn
    assert bpc_user_group.objectClass == ["groupOfNames"]
    assert bpc_user_group.cn == ["borgerpc_users"]
    assert bpc_user_group.member == AnyOrder([alvida_dn, eline_dn, bruce_dn, magnus_dn])

    bpc_owner_group_dn = "cn=borgerpc_owner,dc=magenta,dc=dk"
    bpc_owner_group = await ldap_api.get_object_by_dn(bpc_owner_group_dn)
    assert hasattr(bpc_owner_group, "objectClass")
    assert hasattr(bpc_owner_group, "cn")
    assert hasattr(bpc_owner_group, "member")
    assert bpc_owner_group.dn == bpc_owner_group_dn
    assert bpc_owner_group.objectClass == ["groupOfNames"]
    assert bpc_owner_group.cn == ["borgerpc_owner"]
    assert bpc_owner_group.member == AnyOrder([eline_dn, magnus_dn])

    bpc_admin_group_dn = "cn=borgerpc_admin,dc=magenta,dc=dk"
    bpc_admin_group = await ldap_api.get_object_by_dn(bpc_admin_group_dn)
    assert hasattr(bpc_admin_group, "objectClass")
    assert hasattr(bpc_admin_group, "cn")
    assert hasattr(bpc_admin_group, "member")
    assert bpc_admin_group.dn == bpc_admin_group_dn
    assert bpc_admin_group.objectClass == ["groupOfNames"]
    assert bpc_admin_group.cn == ["borgerpc_admin"]
    assert bpc_admin_group.member == AnyOrder([alvida_dn, magnus_dn])
