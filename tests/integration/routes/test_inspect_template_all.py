# SPDX-FileCopyrightText: Magenta ApS <https://magenta.dk>
# SPDX-License-Identifier: MPL-2.0

import csv
import json
from io import StringIO
from uuid import UUID

import pytest
from httpx import AsyncClient

from mo_ldap_import_export.autogenerated_graphql_client.input_types import (
    EmployeeCreateInput,
)
from mo_ldap_import_export.depends import GraphQLClient


@pytest.mark.integration_test
async def test_ldap_template_all(test_client: AsyncClient, mo_person: UUID) -> None:
    response = await test_client.get("/Inspect/mo2ldap/all")
    assert response.status_code == 200
    stream = StringIO(response.text)
    reader = csv.DictReader(stream, dialect=csv.unix_dialect)
    assert list(reader) == [
        {
            "givenName": "Aage",
            "sn": "Bach Klarskov",
            "employeeNumber": "2108613133",
            "__mo_uuid": str(mo_person),
            "title": str(mo_person),
        }
    ]


@pytest.mark.integration_test
@pytest.mark.usefixtures("ldap_person")
async def test_ldap_template_existent(
    test_client: AsyncClient, mo_person: UUID
) -> None:
    response = await test_client.get("/Inspect/mo2ldap/all")
    assert response.status_code == 200
    stream = StringIO(response.text)
    reader = csv.DictReader(stream, dialect=csv.unix_dialect)
    assert list(reader) == [
        {
            "__mo_uuid": str(mo_person),
            "title": str(mo_person),
        }
    ]


@pytest.mark.integration_test
@pytest.mark.usefixtures("ldap_person")
@pytest.mark.envvar(
    {
        "LISTEN_TO_CHANGES_IN_MO": "False",
        "LISTEN_TO_CHANGES_IN_LDAP": "False",
        "CONVERSION_MAPPING": json.dumps(
            {
                "mo2ldap": """
            {% set mo_employee = load_mo_employee(uuid, current_objects_only=False) %}
            {% set update_dict = {"givenName": mo_employee.given_name} %}
            {% if mo_employee.surname == "Lispy" %}
                {% set _ = update_dict.update(**{"sn": []}) %}
            {% elif mo_employee.surname != "Exclusa" %}
                {% set _ = update_dict.update(**{"sn": mo_employee.surname}) %}
            {% endif %}
            {{update_dict|tojson}}
        """,
            }
        ),
    }
)
async def test_ldap_template_handle_empty(
    test_client: AsyncClient, graphql_client: GraphQLClient
) -> None:
    annie_uuid = UUID("400e0e0d-8a0e-49dd-810a-8bf93ade559f")
    await graphql_client.user_create(
        input=EmployeeCreateInput(
            uuid=annie_uuid,
            given_name="Annie",
            surname="",
            cpr_number="0101690000",
        )
    )
    diabel_uuid = UUID("6c94e9fa-b159-4096-ae2a-c69df31dae81")
    await graphql_client.user_create(
        input=EmployeeCreateInput(
            uuid=diabel_uuid,
            given_name="Diabel",
            surname="Dodongo",
            cpr_number="0101700000",
        )
    )
    elrond_uuid = UUID("bbf67e1b-0d9e-4d9f-9d76-88bad1ae9466")
    await graphql_client.user_create(
        input=EmployeeCreateInput(
            uuid=elrond_uuid,
            given_name="Elrond",
            surname="Exclusa",
            cpr_number="2108613133",
        )
    )
    lucious_uuid = UUID("ea51b0be-7357-41aa-8290-2ba9a6904b87")
    await graphql_client.user_create(
        input=EmployeeCreateInput(
            uuid=lucious_uuid,
            given_name="Lucious",
            surname="Lispy",
            cpr_number="0101710001",
        )
    )
    assert annie_uuid < diabel_uuid < elrond_uuid < lucious_uuid

    response = await test_client.get("/Inspect/mo2ldap/all")
    assert response.status_code == 200
    stream = StringIO(response.text)
    reader = csv.DictReader(stream, quoting=csv.QUOTE_NOTNULL)
    assert list(reader) == [
        {"__mo_uuid": str(annie_uuid), "givenName": "Annie", "sn": ""},
        {"__mo_uuid": str(diabel_uuid), "givenName": "Diabel", "sn": "Dodongo"},
        {"__mo_uuid": str(elrond_uuid), "givenName": "Elrond", "sn": "_NOT_MAPPED_"},
        {"__mo_uuid": str(lucious_uuid), "givenName": "Lucious", "sn": None},
    ]
