# SPDX-FileCopyrightText: 2019-2020 Magenta ApS
# SPDX-License-Identifier: MPL-2.0
import json
from uuid import UUID
from uuid import uuid4

import pytest
from httpx import AsyncClient
from more_itertools import one

from mo_ldap_import_export.autogenerated_graphql_client import GraphQLClient
from mo_ldap_import_export.autogenerated_graphql_client.input_types import (
    ITUserCreateInput,
)
from mo_ldap_import_export.autogenerated_graphql_client.input_types import (
    RAValidityInput,
)
from mo_ldap_import_export.utils import combine_dn_strings

conversion_mapping_with_aduuid_itsystem = {
    "ldap_to_mo": {
        "Employee": {
            "objectClass": "ramodels.mo.employee.Employee",
            "_import_to_mo_": "false",
            "uuid": "{{ employee_uuid or NONE }}",
            "cpr_no": "{{ldap.employeeNumber|strip_non_digits or NONE}}",
        },
        "ADUUID": {
            "objectClass": "ramodels.mo.details.it_system.ITUser",
            "_import_to_mo_": "true",
            "user_key": "{{ ldap.entryUUID }}",
            "itsystem": "{{ dict(uuid=get_it_system_uuid('ADUUID')) }}",
            "person": "{{ dict(uuid=employee_uuid or NONE) }}",
        },
    },
    "mo_to_ldap": {
        "Employee": {
            "objectClass": "inetOrgPerson",
            "_export_to_ldap_": "false",
            "employeeNumber": "{{mo_employee.cpr_no}}",
        },
        "ADUUID": {
            "objectClass": "inetOrgPerson",
            "_export_to_ldap_": "false",
            "entryUUID": "{{ mo_employee_it_user.user_key }}",
        },
    },
    "username_generator": {
        "objectClass": "UserNameGenerator",
        "combinations_to_try": ["FFFX", "LLLX"],
    },
}


@pytest.fixture
async def itsystem_uuid(graphql_client: GraphQLClient) -> UUID:
    return one((await graphql_client.read_itsystem_uuid("ADUUID")).objects).uuid


@pytest.mark.integration_test
@pytest.mark.envvar(
    {
        "LISTEN_TO_CHANGES_IN_LDAP": "False",
        "LISTEN_TO_CHANGES_IN_MO": "False",
        "CONVERSION_MAPPING": json.dumps(conversion_mapping_with_aduuid_itsystem),
    }
)
@pytest.mark.parametrize("num_itusers", (0, 1, 5))
async def test_non_existing_unique_ldap_uuids(
    graphql_client: GraphQLClient,
    test_client: AsyncClient,
    mo_person: UUID,
    itsystem_uuid: UUID,
    ldap_person: list[str],
    num_itusers: int,
) -> None:
    # Create an ITUser in MO with an ADUUID of an existing LDAP user
    dn = combine_dn_strings(ldap_person)

    # Get UUID of the newly created LDAP user
    result = await test_client.get(f"/Inspect/dn2uuid/{dn}")
    assert result.status_code == 200
    ldap_user_uuid = UUID(result.json())

    await graphql_client._testing_ituser_create(
        ITUserCreateInput(
            person=mo_person,
            user_key=str(ldap_user_uuid),
            itsystem=itsystem_uuid,
            validity=RAValidityInput(from_="1970-01-01T00:00:00"),
        )
    )

    # Create a number of ITUsers in MO with random (non-existing) ADUUIDs
    ituser_map = {}
    for _ in range(num_itusers):
        aduuid = uuid4()
        ituser_uuid = (
            await graphql_client._testing_ituser_create(
                ITUserCreateInput(
                    person=mo_person,
                    user_key=str(aduuid),
                    itsystem=itsystem_uuid,
                    validity=RAValidityInput(from_="1970-01-01T00:00:00"),
                )
            )
        ).uuid
        ituser_map[aduuid] = ituser_uuid

    # Expect to see the non-existing ADUUIDs in our result
    expected_result = [
        {
            "ituser_uuid": str(ituser_uuid),
            "mo_employee_uuid": str(mo_person),
            "unique_ldap_uuid": str(aduuid),
        }
        for aduuid, ituser_uuid in ituser_map.items()
    ]
    response = await test_client.get("/Inspect/non_existing_unique_ldap_uuids")
    assert response.status_code == 202
    assert sorted(response.json(), key=lambda x: x["ituser_uuid"]) == sorted(
        expected_result, key=lambda x: x["ituser_uuid"]
    )

    # Call the fixup endpoint, and expect to see all the ituser_uuids
    response = await test_client.post(
        "/fixup/delete_non_existing_unique_ldap_uuids",
        params={"at": "2020-01-01T00:00:00"},
    )
    assert response.status_code == 200
    assert set(response.json()) == set(map(str, ituser_map.values()))

    # Retest the original endpoint, expecting all non-existing ADUUIDs to be gone
    response = await test_client.get("/Inspect/non_existing_unique_ldap_uuids")
    assert response.status_code == 202
    assert response.json() == []


@pytest.mark.integration_test
@pytest.mark.envvar(
    {
        "LISTEN_TO_CHANGES_IN_LDAP": "False",
        "LISTEN_TO_CHANGES_IN_MO": "False",
    }
)
async def test_non_existing_unique_ldap_uuids_no_itsystem(
    test_client: AsyncClient,
) -> None:
    response = await test_client.get("/Inspect/non_existing_unique_ldap_uuids")
    assert response.status_code == 404
