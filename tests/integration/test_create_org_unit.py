# SPDX-FileCopyrightText: Magenta ApS <https://magenta.dk>
# SPDX-License-Identifier: MPL-2.0
import json
from uuid import UUID

import pytest
from fastramqpi.pytest_util import retrying
from more_itertools import one

from mo_ldap_import_export.autogenerated_graphql_client import EmployeeFilter
from mo_ldap_import_export.autogenerated_graphql_client import EngagementFilter
from mo_ldap_import_export.autogenerated_graphql_client import GraphQLClient
from mo_ldap_import_export.autogenerated_graphql_client.input_types import (
    OrganisationUnitFilter,
)
from mo_ldap_import_export.ldapapi import LDAPAPI
from mo_ldap_import_export.utils import combine_dn_strings


@pytest.mark.integration_test
@pytest.mark.envvar(
    {
        "LISTEN_TO_CHANGES_IN_MO": "False",
        "LISTEN_TO_CHANGES_IN_LDAP": "True",
        "CONVERSION_MAPPING": json.dumps(
            {
                "ldap_to_mo": {
                    "Engagement": {
                        "objectClass": "Engagement",
                        "_import_to_mo_": "true",
                        "_ldap_attributes_": [],
                        "user_key": "my key",
                        "person": "{{ employee_uuid }}",
                        "org_unit": "{{ ensure_org_unit(get_org_unit_type_uuid('Afdeling'), org_unit_path_from_dn(ldap.dn)) }}",
                        "engagement_type": "{{ get_engagement_type_uuid('Ansat') }}",
                        "job_function": "{{ get_class_uuid({'user_keys': ['Jurist'], 'facet': {'user_keys': ['engagement_job_function']}}) }}",
                        "primary": "{{ get_primary_type_uuid('primary') }}",
                    },
                },
            }
        ),
    }
)
@pytest.mark.usefixtures("test_client", "afdeling", "ansat", "jurist", "primary")
async def test_create_org_unit(
    graphql_client: GraphQLClient,
    mo_person: UUID,
    ldap_api: LDAPAPI,
    ldap_org: list[str],
) -> None:
    async def create_ldap_org_unit(name: str, parent: list[str]) -> list[str]:
        ou_dn = ["ou=" + name] + parent
        await ldap_api.ldap_connection.ldap_add(
            combine_dn_strings(ou_dn),
            object_class=["top", "organizationalUnit"],
            attributes={"objectClass": ["top", "organizationalUnit"], "ou": name},
        )
        return ou_dn

    ou_dn = ldap_org
    ou_dn = await create_ldap_org_unit("foo", ou_dn)
    ou_dn = await create_ldap_org_unit("bar", ou_dn)
    ou_dn = await create_ldap_org_unit("baz", ou_dn)

    person_dn = combine_dn_strings(["uid=abk"] + ou_dn)
    # LDAP: Create
    await ldap_api.ldap_connection.ldap_add(
        dn=person_dn,
        object_class=["top", "person", "organizationalPerson", "inetOrgPerson"],
        attributes={
            "objectClass": ["top", "person", "organizationalPerson", "inetOrgPerson"],
            "ou": "os2mo",
            "cn": "Aage Bach Klarskov",
            "sn": "Bach Klarskov",
            "employeeNumber": "2108613133",
        },
    )

    # Verify org units
    async def get_org_unit_name(uuid: UUID) -> str:
        org_units = await graphql_client.read_org_unit_name(uuid)
        org_unit = one(org_units.objects)
        assert org_unit.current is not None
        return org_unit.current.name

    async for attempt in retrying():
        with attempt:
            org_units = await graphql_client.read_org_unit_uuid(
                filter=OrganisationUnitFilter()
            )
            org_unit_names = {
                await get_org_unit_name(obj.uuid): obj.uuid for obj in org_units.objects
            }
            assert org_unit_names.keys() == {"foo", "bar", "baz"}

            # Verify engagement
            engagements = await graphql_client._testing__engagement_read(
                filter=EngagementFilter(
                    employee=EmployeeFilter(uuids=[mo_person]),
                ),
            )
            engagement = one(engagements.objects)
            validities = one(engagement.validities)
            assert one(validities.org_unit).uuid == org_unit_names["baz"]
