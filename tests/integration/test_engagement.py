# SPDX-FileCopyrightText: Magenta ApS <https://magenta.dk>
# SPDX-License-Identifier: MPL-2.0
import json
from collections.abc import Awaitable
from collections.abc import Callable
from datetime import datetime
from typing import Any
from unittest.mock import ANY
from uuid import UUID

import pytest
from fastramqpi.pytest_util import retry
from httpx import AsyncClient
from ldap3 import Connection
from more_itertools import one
from structlog.testing import capture_logs

from mo_ldap_import_export.autogenerated_graphql_client import EmployeeFilter
from mo_ldap_import_export.autogenerated_graphql_client import EngagementCreateInput
from mo_ldap_import_export.autogenerated_graphql_client import EngagementFilter
from mo_ldap_import_export.autogenerated_graphql_client import EngagementTerminateInput
from mo_ldap_import_export.autogenerated_graphql_client import EngagementUpdateInput
from mo_ldap_import_export.autogenerated_graphql_client import GraphQLClient
from mo_ldap_import_export.ldap import ldap_add
from mo_ldap_import_export.ldap import ldap_modify
from mo_ldap_import_export.ldap import ldap_search
from mo_ldap_import_export.moapi import MOAPI
from mo_ldap_import_export.types import DN
from mo_ldap_import_export.utils import MO_TZ
from mo_ldap_import_export.utils import combine_dn_strings
from mo_ldap_import_export.utils import mo_today


@pytest.mark.integration_test
@pytest.mark.envvar(
    {
        "LISTEN_TO_CHANGES_IN_MO": "False",
        "LISTEN_TO_CHANGES_IN_LDAP": "True",
        "CONVERSION_MAPPING": json.dumps(
            {
                "ldap_to_mo": {
                    "Engagement": {
                        "objectClass": "Engagement",
                        "_ldap_attributes_": [
                            "carLicense",
                            "title",
                            "departmentNumber",
                        ],
                        # carLicense is arbitrarily chosen as an enabled/disabled marker
                        "_terminate_": "{{ now()|mo_datestring if ldap.carLicense == 'EXPIRED' else '' }}",
                        "uuid": "{{ get_engagement_uuid({'org_unit': {'uuids': [ldap.departmentNumber]}, 'employee': {'uuids': [employee_uuid]}}) }}",
                        "user_key": "{{ ldap.title }}",
                        "person": "{{ employee_uuid }}",
                        "org_unit": "{{ ldap.departmentNumber }}",
                        "engagement_type": "{{ load_mo_primary_engagement(employee_uuid).engagement_type }}",
                        "job_function": "{{ load_mo_primary_engagement(employee_uuid).job_function }}",
                        "primary": "{{ load_mo_primary_engagement(employee_uuid).primary }}",
                        "extension_1": "{{ ldap.title }}",
                    },
                },
                # TODO: why is this required?
                "username_generator": {
                    "combinations_to_try": ["FFFX", "LLLX"],
                },
            }
        ),
    }
)
async def test_to_mo(
    test_client: AsyncClient,
    graphql_client: GraphQLClient,
    mo_person: UUID,
    mo_org_unit: UUID,
    ldap_connection: Connection,
    ldap_org_unit: list[str],
    ansat: UUID,
    jurist: UUID,
    primary: UUID,
) -> None:
    @retry()
    async def assert_engagement(expected: dict) -> None:
        engagements = await graphql_client._testing__engagement_read(
            filter=EngagementFilter(
                employee=EmployeeFilter(uuids=[mo_person]),
            ),
        )
        engagement = one(engagements.objects)
        validities = one(engagement.validities)
        assert validities.dict() == expected

    person_dn = combine_dn_strings(["uid=abk"] + ldap_org_unit)

    # Create a MO engagement
    await graphql_client.engagement_create(
        input=EngagementCreateInput(
            user_key="existing",
            person=mo_person,
            org_unit=mo_org_unit,
            engagement_type=ansat,
            job_function=jurist,
            primary=primary,
            validity={"from": "2001-02-03T04:05:06Z"},
        )
    )
    mo_engagement = {
        "uuid": ANY,
        "user_key": "existing",
        "person": [{"uuid": mo_person}],
        "org_unit": [{"uuid": mo_org_unit}],
        "engagement_type": {"user_key": "Ansat"},
        "job_function": {"user_key": "Jurist"},
        "primary": {"user_key": "primary"},
        "extension_1": None,
        "validity": {"from_": datetime(2001, 2, 3, 0, 0, tzinfo=MO_TZ), "to": None},
    }
    await assert_engagement(mo_engagement)

    # LDAP: Create
    title = "create"
    await ldap_add(
        ldap_connection,
        dn=person_dn,
        object_class=["top", "person", "organizationalPerson", "inetOrgPerson"],
        attributes={
            "objectClass": ["top", "person", "organizationalPerson", "inetOrgPerson"],
            "ou": "os2mo",
            "cn": "Aage Bach Klarskov",
            "sn": "Bach Klarskov",
            "employeeNumber": "2108613133",
            "carLicense": "ACTIVE",
            "title": title,
            "departmentNumber": str(mo_org_unit),
        },
    )
    mo_engagement = {
        **mo_engagement,
        "user_key": title,
        "extension_1": title,
    }
    await assert_engagement(mo_engagement)

    # LDAP: Edit
    title = "edit"
    await ldap_modify(
        ldap_connection,
        dn=person_dn,
        changes={
            "title": [("MODIFY_REPLACE", title)],
        },
    )
    mo_engagement = {
        **mo_engagement,
        "user_key": title,
        "extension_1": title,
    }
    await assert_engagement(mo_engagement)

    # LDAP: Terminate
    await ldap_modify(
        ldap_connection,
        dn=person_dn,
        changes={
            "carLicense": [("MODIFY_REPLACE", "EXPIRED")],
        },
    )
    mo_engagement = {
        **mo_engagement,
        "validity": {"from_": mo_engagement["validity"]["from_"], "to": mo_today()},
    }
    await assert_engagement(mo_engagement)


@pytest.mark.integration_test
@pytest.mark.envvar(
    {
        "LISTEN_TO_CHANGES_IN_MO": "True",
        "LISTEN_TO_CHANGES_IN_LDAP": "False",
        "CONVERSION_MAPPING": json.dumps(
            {
                "mo2ldap": """
                {% set mo_employee_engagement = load_mo_primary_engagement(uuid) %}
                {{
                    {
                        "title": mo_employee_engagement.user_key if mo_employee_engagement else [],
                        "departmentNumber": mo_employee_engagement.org_unit | string if mo_employee_engagement else []
                    }|tojson
                }}
                """,
                # TODO: why is this required?
                "username_generator": {
                    "combinations_to_try": ["FFFX", "LLLX"],
                },
            }
        ),
    }
)
async def test_to_ldap(
    test_client: AsyncClient,
    graphql_client: GraphQLClient,
    mo_api: MOAPI,
    mo_person: UUID,
    mo_org_unit: UUID,
    ldap_connection: Connection,
    ldap_org_unit: list[str],
    ansat: UUID,
    jurist: UUID,
    primary: UUID,
) -> None:
    cpr = "2108613133"

    @retry()
    async def assert_engagement(expected: dict[str, Any]) -> None:
        response, _ = await ldap_search(
            ldap_connection,
            search_base=combine_dn_strings(ldap_org_unit),
            search_filter=f"(employeeNumber={cpr})",
            attributes=["title", "departmentNumber"],
        )
        assert one(response)["attributes"] == expected

    # LDAP: Init user
    person_dn = combine_dn_strings(["uid=abk"] + ldap_org_unit)
    await ldap_add(
        ldap_connection,
        dn=person_dn,
        object_class=["top", "person", "organizationalPerson", "inetOrgPerson"],
        attributes={
            "objectClass": ["top", "person", "organizationalPerson", "inetOrgPerson"],
            "ou": "os2mo",
            "cn": "Aage Bach Klarskov",
            "sn": "Bach Klarskov",
            "employeeNumber": cpr,
        },
    )
    await assert_engagement({"title": [], "departmentNumber": []})

    # MO: Create
    title = "create"
    mo_engagement = await graphql_client.engagement_create(
        input=EngagementCreateInput(
            user_key=title,
            person=mo_person,
            org_unit=mo_org_unit,
            engagement_type=ansat,
            job_function=jurist,
            primary=primary,
            extension_1=title,
            validity={"from": "2001-02-03T04:05:06Z"},
        )
    )
    await assert_engagement({"title": [title], "departmentNumber": [str(mo_org_unit)]})

    # MO: Edit
    title = "update"
    await graphql_client.engagement_update(
        input=EngagementUpdateInput(
            uuid=mo_engagement.uuid,
            user_key=title,
            validity={"from": "2011-12-13T14:15:16Z"},
            # TODO: why is this required?
            person=mo_person,
            org_unit=mo_org_unit,
            engagement_type=ansat,
            job_function=jurist,
            primary=primary,
            extension_1=title,
        )
    )
    await assert_engagement({"title": [title], "departmentNumber": [str(mo_org_unit)]})

    # MO: Terminate
    await graphql_client.engagement_terminate(
        input=EngagementTerminateInput(
            uuid=mo_engagement.uuid,
            to=mo_today(),
        ),
    )
    await assert_engagement({"title": [], "departmentNumber": []})


@pytest.mark.integration_test
@pytest.mark.envvar(
    {
        "LISTEN_TO_CHANGES_IN_MO": "False",
        "LISTEN_TO_CHANGES_IN_LDAP": "False",
        "CONVERSION_MAPPING": json.dumps(
            {
                "ldap_to_mo": {
                    "Engagement": {
                        "objectClass": "Engagement",
                        "_ldap_attributes_": ["title"],
                        "uuid": "{{ skip_if_none(load_mo_primary_engagement(employee_uuid)).uuid }}",
                        "user_key": "{{ skip_if_none(load_mo_primary_engagement(employee_uuid)).user_key }}",
                        "org_unit": "{{ skip_if_none(load_mo_primary_engagement(employee_uuid)).org_unit }}",
                        "person": "{{ skip_if_none(load_mo_primary_engagement(employee_uuid)).person }}",
                        "job_function": "{{ skip_if_none(load_mo_primary_engagement(employee_uuid)).job_function }}",
                        "engagement_type": "{{ skip_if_none(load_mo_primary_engagement(employee_uuid)).engagement_type }}",
                        "primary": "{{ skip_if_none(load_mo_primary_engagement(employee_uuid)).primary }}",
                        "extension_1": "{{ ldap.title }}",
                    },
                },
                # TODO: why is this required?
                "username_generator": {
                    "combinations_to_try": ["FFFX", "LLLX"],
                },
            }
        ),
    }
)
@pytest.mark.usefixtures("test_client")
async def test_to_mo_skip_if_none(
    graphql_client: GraphQLClient,
    ldap_person_dn: DN,
    mo_person: UUID,
    mo_org_unit: UUID,
    ansat: UUID,
    jurist: UUID,
    primary: UUID,
    trigger_ldap_person: Callable[[], Awaitable[None]],
) -> None:
    skip_object_log = {
        "dn": ldap_person_dn,
        "event": "Skipping object",
        "log_level": "info",
    }

    # No engagement in MO, yields skipped object in logs
    with capture_logs() as cap_logs:
        await trigger_ldap_person()

    assert skip_object_log in cap_logs

    # Create the engagement
    await graphql_client.engagement_create(
        input=EngagementCreateInput(
            user_key="engagement",
            person=mo_person,
            org_unit=mo_org_unit,
            engagement_type=ansat,
            job_function=jurist,
            primary=primary,
            extension_1="create",
            validity={"from": "2001-02-03T04:05:06Z"},
        )
    )

    # Engagement in MO, means no skipped object in logs and updated extension_1
    with capture_logs() as cap_logs:
        await trigger_ldap_person()

    assert skip_object_log not in cap_logs

    engagements = await graphql_client._testing__engagement_read(
        filter=EngagementFilter(
            employee=EmployeeFilter(uuids=[mo_person]),
        ),
    )
    engagement = one(engagements.objects)
    validities = one(engagement.validities)
    assert validities.extension_1 == "Skole underviser"


@pytest.mark.integration_test
@pytest.mark.envvar(
    {
        "LISTEN_TO_CHANGES_IN_MO": "False",
        "LISTEN_TO_CHANGES_IN_LDAP": "False",
        "CONVERSION_MAPPING": json.dumps(
            {
                "ldap_to_mo": {
                    "Engagement": {
                        "objectClass": "Engagement",
                        "_ldap_attributes_": ["title"],
                        "uuid": "{{ skip_if_none(load_mo_primary_engagement(employee_uuid)).uuid }}",
                        "user_key": "{{ skip_if_none(load_mo_primary_engagement(employee_uuid)).user_key }}",
                        "org_unit": "{{ skip_if_none(load_mo_primary_engagement(employee_uuid)).org_unit }}",
                        "person": "{{ skip_if_none(load_mo_primary_engagement(employee_uuid)).person }}",
                        "job_function": "{{ skip_if_none(load_mo_primary_engagement(employee_uuid)).job_function }}",
                        "engagement_type": "{{ skip_if_none(load_mo_primary_engagement(employee_uuid)).engagement_type }}",
                        "primary": "{{ skip_if_none(load_mo_primary_engagement(employee_uuid)).primary }}",
                        "extension_1": "{{ ldap.title }}",
                    },
                },
                # TODO: why is this required?
                "username_generator": {
                    "combinations_to_try": ["FFFX", "LLLX"],
                },
            }
        ),
    }
)
@pytest.mark.usefixtures("test_client")
async def test_to_mo_future_engagement_new_mapping(
    graphql_client: GraphQLClient,
    mo_person: UUID,
    mo_org_unit: UUID,
    ansat: UUID,
    jurist: UUID,
    primary: UUID,
    trigger_ldap_person: Callable[[], Awaitable[None]],
) -> None:
    # Create the future engagement
    await graphql_client.engagement_create(
        input=EngagementCreateInput(
            user_key="future",
            person=mo_person,
            org_unit=mo_org_unit,
            engagement_type=ansat,
            job_function=jurist,
            primary=primary,
            extension_1="create",
            validity={"from": "3000-01-01T00:00:00Z", "to": "4000-01-01T00:00:00Z"},
        )
    )

    await trigger_ldap_person()

    engagements = await graphql_client._testing__engagement_read(
        filter=EngagementFilter(
            from_date=None,
            to_date=None,
            employee=EmployeeFilter(uuids=[mo_person]),
        ),
    )
    engagement = one(engagements.objects)
    validities = one(engagement.validities)
    assert validities.extension_1 == "Skole underviser"
    assert validities.validity.from_ == datetime(3000, 1, 1, 0, 0, tzinfo=MO_TZ)
    assert validities.validity.to == datetime(4000, 1, 1, 0, 0, tzinfo=MO_TZ)
