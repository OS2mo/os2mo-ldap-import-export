# SPDX-FileCopyrightText: Magenta ApS <https://magenta.dk>
# SPDX-License-Identifier: MPL-2.0
import json
from collections.abc import Awaitable
from collections.abc import Callable
from typing import cast

import pytest
from more_itertools import one

from mo_ldap_import_export.autogenerated_graphql_client import EmployeeCreateInput
from mo_ldap_import_export.autogenerated_graphql_client import GraphQLClient
from mo_ldap_import_export.ldapapi import LDAPAPI
from mo_ldap_import_export.types import EmployeeUUID
from mo_ldap_import_export.utils import combine_dn_strings


@pytest.mark.integration_test
@pytest.mark.envvar(
    {
        "LISTEN_TO_CHANGES_IN_MO": "False",
        "LISTEN_TO_CHANGES_IN_LDAP": "False",
        "CONVERSION_MAPPING": json.dumps(
            {
                "mo2ldap": """
                    {% set mo_employee = load_mo_employee(uuid, current_objects_only=False) %}
                    {{
                        {
                            "employeeNumber": mo_employee.cpr_number,
                            "uid": mo_employee.cpr_number,
                            "cn": mo_employee.given_name + " " + mo_employee.surname,
                            "sn": mo_employee.surname,
                            "givenName": mo_employee.given_name,
                        }|tojson
                    }}
                """,
                # TODO: why is this required?
                "username_generator": {
                    "combinations_to_try": ["FFFX", "LLLX"],
                },
            }
        ),
    }
)
@pytest.mark.usefixtures("test_client")
async def test_to_ldap(
    trigger_sync: Callable[[EmployeeUUID], Awaitable[None]],
    graphql_client: GraphQLClient,
    ldap_api: LDAPAPI,
    ldap_org_unit: list[str],
) -> None:
    async def fetch_common_name(cpr_number: str) -> str:
        # Fetch the LDAP UUID for the newly created LDAP user
        response, _ = await ldap_api.ldap_connection.ldap_search(
            search_base=combine_dn_strings(ldap_org_unit),
            search_filter=f"(employeeNumber={cpr_number})",
            attributes=["cn"],
        )
        employee = one(response)
        return cast(str, one(employee["attributes"]["cn"]))

    # Create our first employee and ensure they get the expected name
    mo_person_1_cpr_number = "0101700000"
    mo_person_1 = await graphql_client.person_create(
        input=EmployeeCreateInput(
            cpr_number=mo_person_1_cpr_number,
            given_name="Shimon",
            surname="Yonah",
        )
    )

    await trigger_sync(EmployeeUUID(mo_person_1.uuid))
    common_name = await fetch_common_name(mo_person_1_cpr_number)
    assert common_name == "Shimon Yonah"

    # Create our second employee and ensure they fail due to naming conflict
    mo_person_2_cpr_number = "0101000000"
    mo_person_2 = await graphql_client.person_create(
        input=EmployeeCreateInput(
            cpr_number=mo_person_2_cpr_number,
            given_name="Shimon",
            surname="Yonah",
        )
    )

    # We expect this to fail as we template cn to the same value as in the above
    with pytest.raises(AssertionError) as exc_info:
        await trigger_sync(EmployeeUUID(mo_person_2.uuid))
    assert "LDAPEntryAlreadyExistsResult" in str(exc_info.value)
