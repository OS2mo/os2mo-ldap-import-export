# SPDX-FileCopyrightText: Magenta ApS <https://magenta.dk>
# SPDX-License-Identifier: MPL-2.0
import json
from collections.abc import Awaitable
from collections.abc import Callable
from typing import cast

import pytest
from more_itertools import only

from mo_ldap_import_export.autogenerated_graphql_client import GraphQLClient
from mo_ldap_import_export.autogenerated_graphql_client.input_types import (
    EmployeeUpdateInput,
)
from mo_ldap_import_export.ldap import get_ldap_object
from mo_ldap_import_export.ldapapi import LDAPAPI
from mo_ldap_import_export.types import DN
from mo_ldap_import_export.types import EmployeeUUID
from mo_ldap_import_export.utils import combine_dn_strings
from mo_ldap_import_export.utils import mo_today


@pytest.mark.integration_test
@pytest.mark.envvar(
    {
        "LISTEN_TO_CHANGES_IN_MO": "False",
        "LISTEN_TO_CHANGES_IN_LDAP": "False",
        "CONVERSION_MAPPING": json.dumps(
            {
                "mo2ldap": """
                    {% set mo_employee = load_mo_employee(uuid, current_objects_only=False) %}
                    {% set mo_person_dn = get_person_dn(uuid) %}

                    {% set update_dict = {
                        "employeeNumber": mo_employee.cpr_number,
                        "cn": mo_employee.given_name + " " + mo_employee.surname,
                        "sn": mo_employee.surname,
                        "givenName": mo_employee.given_name,
                        "displayName": mo_employee.nickname_given_name + " " + mo_employee.nickname_surname
                    }
                    %}

                    {% if mo_person_dn is none %}
                        {% set _ = update_dict.update(**{
                            "carLicense": mo_employee.surname
                        })
                        %}
                    {% endif %}

                    {{update_dict|tojson}}
                """,
                "username_generator": {
                    "combinations_to_try": ["FFFX", "LLLX"],
                },
            }
        ),
    }
)
async def test_no_changing_car_license(
    graphql_client: GraphQLClient,
    trigger_mo_person: Callable[[], Awaitable[None]],
    ldap_api: LDAPAPI,
    ldap_org_unit: list[str],
    mo_person: EmployeeUUID,
) -> None:
    cpr = "2108613133"

    async def find_employee_dn() -> DN | None:
        response, _ = await ldap_api.ldap_connection.ldap_search(
            search_base=combine_dn_strings(ldap_org_unit),
            search_filter=f"(employeeNumber={cpr})",
            attributes=[],
        )
        employee = only(response)
        if employee is None:
            return None
        return cast(DN, employee["dn"])

    # Check that no person exists at the beginning of testing
    result = await find_employee_dn()
    assert result is None

    # Trigger the person in MO
    await trigger_mo_person()

    # Check that the person now exists
    result = await find_employee_dn()
    assert result is not None
    person_dn = result

    # Check that the data is as we expect
    ldap_object = await get_ldap_object(ldap_api.ldap_connection.connection, person_dn)
    assert ldap_object.dn == person_dn
    assert hasattr(ldap_object, "carLicense")
    assert ldap_object.carLicense == ["Bach Klarskov"]
    assert hasattr(ldap_object, "sn")
    assert ldap_object.sn == ["Bach Klarskov"]

    # Change the persons surname
    await graphql_client._testing__person_update(
        EmployeeUpdateInput(
            uuid=mo_person, surname="New Surname", validity={"from": mo_today()}
        )
    )

    # Trigger the person in MO
    await trigger_mo_person()

    # Check that the person still exists
    result = await find_employee_dn()
    assert result is not None
    person_dn = result

    # Check that the data is as we expect
    ldap_object = await get_ldap_object(ldap_api.ldap_connection.connection, person_dn)
    assert ldap_object.dn == person_dn
    # Check that carLicense was only set during creates, not doing updates
    assert hasattr(ldap_object, "carLicense")
    assert ldap_object.carLicense == ["Bach Klarskov"]
    # While surname was updated always
    assert hasattr(ldap_object, "sn")
    assert ldap_object.sn == ["New Surname"]
