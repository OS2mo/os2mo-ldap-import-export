# SPDX-FileCopyrightText: Magenta ApS <https://magenta.dk>
# SPDX-License-Identifier: MPL-2.0
import json
from collections.abc import Awaitable
from collections.abc import Callable
from typing import Any
from unittest.mock import ANY

import pytest
from more_itertools import one

from mo_ldap_import_export.autogenerated_graphql_client.input_types import (
    ITSystemFilter,
)
from mo_ldap_import_export.depends import GraphQLClient
from mo_ldap_import_export.ldapapi import LDAPAPI
from mo_ldap_import_export.types import DN
from mo_ldap_import_export.types import LDAPUUID
from mo_ldap_import_export.utils import combine_dn_strings
from mo_ldap_import_export.utils import mo_today
from tests.integration.conftest import DN2UUID


@pytest.mark.integration_test
@pytest.mark.envvar(
    {
        "LISTEN_TO_CHANGES_IN_MO": "False",
        "LISTEN_TO_CHANGES_IN_LDAP": "False",
        "CONVERSION_MAPPING": json.dumps(
            {
                "ldap_to_mo_any": {
                    # GroupOfNames is the objectClass we listen to
                    "groupOfNames": {
                        "ITSystem": {
                            "objectClass": "ITSystem",
                            "_import_to_mo_": "true",
                            "_ldap_attributes_": ["cn", "entryUUID", "description"],
                            "_terminate_": "{{ now()|mo_datestring if ldap.description == 'DISABLED' else '' }}",
                            "uuid": "{{ get_itsystem_uuid({'user_keys': [ldap.entryUUID]}) }}",
                            "user_key": "{{ ldap.entryUUID }}",
                            "name": "{{ ldap.cn }}",
                        }
                    }
                },
                # TODO: why is this required?
                "username_generator": {
                    "combinations_to_try": ["FFFX", "LLLX"],
                },
            }
        ),
    }
)
@pytest.mark.usefixtures("test_client")
async def test_to_mo(
    trigger_ldap_sync: Callable[[LDAPUUID], Awaitable[None]],
    dn2uuid: DN2UUID,
    graphql_client: GraphQLClient,
    ldap_api: LDAPAPI,
    ldap_org: list[str],
    ldap_person_dn: DN,
) -> None:
    async def get_itsystem(user_key: str) -> dict[str, Any]:
        it_systems = await graphql_client._testing__itsystem_read(
            filter=ITSystemFilter(user_keys=[user_key])
        )
        it_system = one(it_systems.objects)
        validities = one(it_system.validities)
        return validities.dict()

    # Create an LDAP group
    group_dn = combine_dn_strings(["cn=os2mo"] + ldap_org)
    await ldap_api.ldap_connection.ldap_add(
        dn=group_dn,
        object_class=["top", "GroupOfNames"],
        attributes={
            "objectClass": ["top", "GroupOfNames"],
            "member": [ldap_person_dn],
        },
    )
    group_uuid = await dn2uuid(group_dn)

    # Trigger synchronization, and check that an ITSystem appears in MO
    await trigger_ldap_sync(group_uuid)
    expected = {
        "uuid": ANY,
        "user_key": str(group_uuid),
        "name": "os2mo",
        "validity": {
            "from_": mo_today(),
            "to": None,
        },
    }
    assert await get_itsystem(str(group_uuid)) == expected

    # Retiggering synchronization should make no changes
    await trigger_ldap_sync(group_uuid)
    assert await get_itsystem(str(group_uuid)) == expected

    # Change the name of our group, and check that it is reflected in MO
    await ldap_api.ldap_connection.ldap_modify_dn(dn=group_dn, relative_dn="cn=gir")
    await trigger_ldap_sync(group_uuid)
    expected.update({"name": "gir"})
    assert await get_itsystem(str(group_uuid)) == expected

    # Mark the group disabled, and check that it is reflected in MO
    group_dn = combine_dn_strings(["cn=gir"] + ldap_org)
    await ldap_api.ldap_connection.ldap_modify(
        dn=group_dn,
        changes={
            "description": [("MODIFY_REPLACE", "DISABLED")],
        },
    )
    await trigger_ldap_sync(group_uuid)
    expected.update({"validity": {"from_": mo_today(), "to": mo_today()}})
    assert await get_itsystem(str(group_uuid)) == expected
