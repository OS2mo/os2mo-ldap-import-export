# SPDX-FileCopyrightText: Magenta ApS <https://magenta.dk>
# SPDX-License-Identifier: MPL-2.0
from datetime import datetime
from unittest.mock import AsyncMock
from unittest.mock import call
from uuid import UUID

import pytest
from fastramqpi.context import Context
from httpx import AsyncClient
from tenacity import AsyncRetrying
from tenacity import wait_fixed

from mo_ldap_import_export.autogenerated_graphql_client import GraphQLClient
from mo_ldap_import_export.autogenerated_graphql_client.input_types import (
    EmployeeCreateInput,
)
from mo_ldap_import_export.autogenerated_graphql_client.input_types import (
    EngagementCreateInput,
)
from mo_ldap_import_export.autogenerated_graphql_client.input_types import (
    OrganisationUnitCreateInput,
)


@pytest.mark.integration_test
@pytest.mark.envvar(
    {
        "LISTEN_TO_CHANGES_IN_MO": "True",
        "LISTEN_TO_CHANGES_IN_LDAP": "False",
    }
)
@pytest.mark.parametrize(
    "e_start,e_end,o_start,o_end",
    [
        # Engagement current, org-unit current
        (
            datetime(1970, 1, 1),
            None,
            datetime(1970, 1, 1),
            None,
        ),
        # No case with engagement to=None and ended org-unit as MO disallows this
        # with ErrorCodes.V_DATE_OUTSIDE_ORG_UNIT_RANGE
        (
            datetime(1970, 1, 1),
            datetime(3000, 1, 1),
            datetime(1970, 1, 1),
            None,
        ),
        (
            datetime(1970, 1, 1),
            datetime(3000, 1, 1),
            datetime(1970, 1, 1),
            datetime(3000, 1, 1),
        ),
        # Engagement past, org-unit current
        pytest.param(
            datetime(1970, 1, 1),
            datetime(1980, 1, 1),
            datetime(1970, 1, 1),
            None,
            marks=pytest.mark.xfail(reason="no events send"),
        ),
        pytest.param(
            datetime(1970, 1, 1),
            datetime(1980, 1, 1),
            datetime(1970, 1, 1),
            datetime(3000, 1, 1),
            marks=pytest.mark.xfail(reason="no events send"),
        ),
        # Engagement past, org-unit past
        pytest.param(
            datetime(1970, 1, 1),
            datetime(1980, 1, 1),
            datetime(1970, 1, 1),
            datetime(1980, 1, 1),
            marks=pytest.mark.xfail(reason="no events send"),
        ),
        # Engagement future, org-unit current
        pytest.param(
            datetime(2900, 1, 1),
            None,
            datetime(1970, 1, 1),
            None,
            marks=pytest.mark.xfail(reason="no events send"),
        ),
        pytest.param(
            datetime(2900, 1, 1),
            datetime(3000, 1, 1),
            datetime(1970, 1, 1),
            None,
            marks=pytest.mark.xfail(reason="no events send"),
        ),
        pytest.param(
            datetime(2900, 1, 1),
            datetime(3000, 1, 1),
            datetime(1970, 1, 1),
            datetime(3000, 1, 1),
            marks=pytest.mark.xfail(reason="no events send"),
        ),
        # Engagement future, org-unit future
        pytest.param(
            datetime(2900, 1, 1),
            datetime(3000, 1, 1),
            datetime(2900, 1, 1),
            None,
            marks=pytest.mark.xfail(reason="no events send"),
        ),
        pytest.param(
            datetime(2900, 1, 1),
            datetime(3000, 1, 1),
            datetime(2900, 1, 1),
            datetime(3000, 1, 1),
            marks=pytest.mark.xfail(reason="no events send"),
        ),
    ],
)
async def test_orgunit2engagement2person(
    test_client: AsyncClient,
    graphql_client: GraphQLClient,
    mo_person: UUID,
    afdeling: UUID,
    ansat: UUID,
    jurist: UUID,
    primary: UUID,
    context: Context,
    e_start: datetime | None,
    e_end: datetime | None,
    o_start: datetime | None,
    o_end: datetime | None,
) -> None:
    sync_tool_mock = AsyncMock()
    context["user_context"]["sync_tool"] = sync_tool_mock

    org_unit = await graphql_client.org_unit_create(
        input=OrganisationUnitCreateInput(
            name="org_unit",
            org_unit_type=afdeling,
            validity={"from": o_start, "to": o_end},
        )
    )

    await graphql_client.engagement_create(
        input=EngagementCreateInput(
            user_key="engagement",
            person=mo_person,
            org_unit=org_unit.uuid,
            engagement_type=ansat,
            job_function=jurist,
            primary=primary,
            validity={"from": e_start, "to": e_end},
        )
    )

    result = await test_client.post(
        "/mo2ldap/org_unit",
        headers={"Content-Type": "text/plain"},
        content=str(org_unit.uuid),
    )
    result.raise_for_status()

    async for attempt in AsyncRetrying(wait=wait_fixed(1)):
        with attempt:
            # Check that we ended up synchronizing the user
            sync_tool_mock.listen_to_changes_in_employees.assert_called_with(mo_person)


@pytest.mark.integration_test
@pytest.mark.envvar(
    {
        "LISTEN_TO_CHANGES_IN_MO": "True",
        "LISTEN_TO_CHANGES_IN_LDAP": "False",
    }
)
async def test_orgunit2engagement2person_multiple_engagements(
    test_client: AsyncClient,
    graphql_client: GraphQLClient,
    mo_person: UUID,
    mo_org_unit: UUID,
    ansat: UUID,
    jurist: UUID,
    primary: UUID,
    context: Context,
) -> None:
    sync_tool_mock = AsyncMock()
    context["user_context"]["sync_tool"] = sync_tool_mock

    await graphql_client.engagement_create(
        input=EngagementCreateInput(
            user_key="engagement",
            person=mo_person,
            org_unit=mo_org_unit,
            engagement_type=ansat,
            job_function=jurist,
            primary=primary,
            validity={"from": datetime(2000, 1, 1)},
        )
    )
    await graphql_client.engagement_create(
        input=EngagementCreateInput(
            user_key="engagement",
            person=mo_person,
            org_unit=mo_org_unit,
            engagement_type=ansat,
            job_function=jurist,
            primary=primary,
            validity={"from": datetime(2000, 1, 1)},
        )
    )

    result = await test_client.post(
        "/mo2ldap/org_unit",
        headers={"Content-Type": "text/plain"},
        content=str(mo_org_unit),
    )
    result.raise_for_status()

    async for attempt in AsyncRetrying(wait=wait_fixed(1)):
        with attempt:
            # Check that we ended up synchronizing the user
            sync_tool_mock.listen_to_changes_in_employees.assert_called_with(mo_person)


@pytest.mark.integration_test
@pytest.mark.envvar(
    {
        "LISTEN_TO_CHANGES_IN_MO": "True",
        "LISTEN_TO_CHANGES_IN_LDAP": "False",
    }
)
async def test_orgunit2engagement2person_parallel_engagements(
    test_client: AsyncClient,
    graphql_client: GraphQLClient,
    mo_org_unit: UUID,
    ansat: UUID,
    jurist: UUID,
    primary: UUID,
    context: Context,
) -> None:
    sync_tool_mock = AsyncMock()
    context["user_context"]["sync_tool"] = sync_tool_mock

    person1 = await graphql_client.user_create(
        input=EmployeeCreateInput(
            given_name="Aage",
            surname="Aagaard",
            cpr_number="0101010123",
        )
    )

    person2 = await graphql_client.user_create(
        input=EmployeeCreateInput(
            given_name="Betina",
            surname="Bundgaard",
            cpr_number="0101011234",
        )
    )

    await graphql_client.engagement_create(
        input=EngagementCreateInput(
            user_key="engagement",
            person=person1.uuid,
            org_unit=mo_org_unit,
            engagement_type=ansat,
            job_function=jurist,
            primary=primary,
            validity={"from": datetime(2000, 1, 1)},
        )
    )
    await graphql_client.engagement_create(
        input=EngagementCreateInput(
            user_key="engagement",
            person=person2.uuid,
            org_unit=mo_org_unit,
            engagement_type=ansat,
            job_function=jurist,
            primary=primary,
            validity={"from": datetime(2000, 1, 1)},
        )
    )

    result = await test_client.post(
        "/mo2ldap/org_unit",
        headers={"Content-Type": "text/plain"},
        content=str(mo_org_unit),
    )
    result.raise_for_status()

    async for attempt in AsyncRetrying(wait=wait_fixed(1)):
        with attempt:
            # Check that we ended up synchronizing the user
            sync_tool_mock.listen_to_changes_in_employees.assert_has_awaits(
                [
                    call(person1.uuid),
                    call(person2.uuid),
                ],
                any_order=True,
            )
