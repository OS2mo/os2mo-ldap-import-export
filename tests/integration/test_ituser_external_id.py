# SPDX-FileCopyrightText: Magenta ApS <https://magenta.dk>
# SPDX-License-Identifier: MPL-2.0
from datetime import datetime
from uuid import UUID
from uuid import uuid4

import pytest

from mo_ldap_import_export.autogenerated_graphql_client import GraphQLClient
from mo_ldap_import_export.depends import Settings
from mo_ldap_import_export.moapi import MOAPI
from mo_ldap_import_export.models import ITUser
from mo_ldap_import_export.utils import MO_TZ


@pytest.fixture
def moapi(graphql_client: GraphQLClient) -> MOAPI:
    settings = Settings()
    return MOAPI(settings, graphql_client)


@pytest.mark.integration_test
async def test_create_ituser_read_equivalence(
    moapi: MOAPI,
    mo_person: UUID,
    adtitle: UUID,
) -> None:
    ituser_uuid = uuid4()
    ituser = ITUser(
        uuid=ituser_uuid,
        user_key="ava",
        itsystem=adtitle,
        person=mo_person,
        validity={"from": datetime(1970, 1, 1, tzinfo=MO_TZ)},
    )
    await moapi.create([ituser])
    assert await moapi.load_mo_it_user(ituser_uuid) == ituser

    ituser = ituser.copy(update={"user_key": "modified"})
    await moapi.edit([ituser])
    assert await moapi.load_mo_it_user(ituser_uuid) == ituser


@pytest.mark.integration_test
async def test_create_ituser_external_id_read_equivalence(
    moapi: MOAPI,
    mo_person: UUID,
    adtitle: UUID,
) -> None:
    ituser_uuid = uuid4()
    ituser = ITUser(
        uuid=ituser_uuid,
        user_key="ava",
        itsystem=adtitle,
        person=mo_person,
        external_id="my_external_id",
        validity={"from": datetime(1970, 1, 1, tzinfo=MO_TZ)},
    )
    await moapi.create([ituser])
    assert await moapi.load_mo_it_user(ituser_uuid) == ituser

    ituser = ituser.copy(update={"external_id": "modified"})
    await moapi.edit([ituser])
    assert await moapi.load_mo_it_user(ituser_uuid) == ituser
