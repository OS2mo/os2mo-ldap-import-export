# SPDX-FileCopyrightText: Magenta ApS <https://magenta.dk>
# SPDX-License-Identifier: MPL-2.0
import json
from typing import Any
from unittest.mock import ANY

import pytest
from fastramqpi.pytest_util import retrying
from more_itertools import one

from mo_ldap_import_export.autogenerated_graphql_client import GraphQLClient
from mo_ldap_import_export.autogenerated_graphql_client.input_types import (
    EmployeeFilter,
)
from mo_ldap_import_export.ldapapi import LDAPAPI
from mo_ldap_import_export.utils import combine_dn_strings
from mo_ldap_import_export.utils import mo_today
from tests.integration.conftest import DN2UUID


@pytest.mark.integration_test
@pytest.mark.envvar(
    {
        "LISTEN_TO_CHANGES_IN_MO": "False",
        "LISTEN_TO_CHANGES_IN_LDAP": "True",
        "CONVERSION_MAPPING": json.dumps(
            {
                "ldap_to_mo_any": {
                    "organizationalUnit": {
                        "OrganisationUnit": {
                            "objectClass": "OrganisationUnit",
                            "_import_to_mo_": "true",
                            "_ldap_attributes_": ["entryUUID", "ou", "l"],
                            # "l" is arbitrarily chosen as an enabled/disabled marker
                            "_terminate_": "{{ now()|mo_datestring if ldap.l == 'EXPIRED' else '' }}",
                            "uuid": "{{ get_org_unit_uuid({'user_keys': [ldap.entryUUID]}) or uuid4() }}",
                            "user_key": "{{ ldap.entryUUID }}",
                            "name": "{{ ldap.ou }}",
                            "unit_type": "{{ get_org_unit_type_uuid('Afdeling') }}",
                        },
                    }
                },
                # TODO: why is this required?
                "username_generator": {
                    "combinations_to_try": ["FFFX", "LLLX"],
                },
            }
        ),
    }
)
@pytest.mark.usefixtures("test_client")
async def test_to_mo_org_unit(
    graphql_client: GraphQLClient,
    ldap_api: LDAPAPI,
    ldap_org: list[str],
    dn2uuid: DN2UUID,
) -> None:
    async def get_org_unit() -> dict[str, Any]:
        org_units = await graphql_client._testing__org_unit_read()
        org_unit = one(org_units.objects)
        validities = one(org_unit.validities)
        return validities.dict()

    org_unit_dn = combine_dn_strings(["ou=create"] + ldap_org)

    # LDAP: Create
    await ldap_api.ldap_connection.ldap_add(
        dn=org_unit_dn,
        object_class=["top", "organizationalUnit"],
        attributes={
            "objectClass": ["top", "organizationalUnit"],
        },
    )
    ldap_org_unit_uuid = await dn2uuid(org_unit_dn)

    mo_org_unit = {
        "uuid": ANY,
        "user_key": str(ldap_org_unit_uuid),
        "name": "create",
        "parent": None,
        "unit_type": {"user_key": "Afdeling"},
        "org_unit_level": {"user_key": "N1"},
        "validity": {
            "from_": mo_today(),
            "to": None,
        },
    }
    async for attempt in retrying():
        with attempt:
            assert await get_org_unit() == mo_org_unit

    # LDAP: Edit
    await ldap_api.ldap_connection.ldap_modify_dn(
        dn=org_unit_dn,
        relative_dn="ou=edit",
    )
    mo_org_unit = {
        **mo_org_unit,
        "name": "edit",
    }
    async for attempt in retrying():
        with attempt:
            assert await get_org_unit() == mo_org_unit

    org_unit_dn = combine_dn_strings(["ou=edit"] + ldap_org)

    # LDAP: Terminate
    await ldap_api.ldap_connection.ldap_modify(
        dn=org_unit_dn,
        changes={
            "l": [("MODIFY_REPLACE", "EXPIRED")],
        },
    )
    mo_org_unit = {
        **mo_org_unit,
        "validity": {"from_": mo_today(), "to": mo_today()},
    }
    async for attempt in retrying():
        with attempt:
            assert await get_org_unit() == mo_org_unit


@pytest.mark.integration_test
@pytest.mark.envvar(
    {
        "LISTEN_TO_CHANGES_IN_MO": "False",
        "LISTEN_TO_CHANGES_IN_LDAP": "True",
        "CONVERSION_MAPPING": json.dumps(
            {
                "ldap_to_mo_any": {
                    "inetOrgPerson": {
                        "Employee": {
                            "objectClass": "Employee",
                            "_import_to_mo_": "true",
                            "_ldap_attributes_": ["employeeNumber", "givenName", "sn"],
                            "uuid": "{{ get_person_uuid({'cpr_numbers': [ldap.employeeNumber]}) }}",
                            "cpr_number": "{{ ldap.employeeNumber }}",
                            "given_name": "{{ ldap.givenName }}",
                            "surname": "{{ ldap.sn }}",
                            "nickname_given_name": "foo",
                            "nickname_surname": "bar",
                        },
                    }
                },
                # TODO: why is this required?
                "username_generator": {
                    "combinations_to_try": ["FFFX", "LLLX"],
                },
            }
        ),
    }
)
@pytest.mark.usefixtures("test_client")
async def test_to_mo_person(
    graphql_client: GraphQLClient,
    ldap_api: LDAPAPI,
    ldap_org_unit: list[str],
) -> None:
    cpr = "2108613133"

    async def get_employee() -> dict[str, Any]:
        employees = await graphql_client._testing__employee_read(
            filter=EmployeeFilter(cpr_numbers=[cpr])
        )
        employee = one(employees.objects)
        validities = one(employee.validities)
        return validities.dict()

    person_dn = combine_dn_strings(["uid=abk"] + ldap_org_unit)

    # LDAP: Create
    given_name = "create"
    await ldap_api.ldap_connection.ldap_add(
        dn=person_dn,
        object_class=["top", "person", "organizationalPerson", "inetOrgPerson"],
        attributes={
            "objectClass": ["top", "person", "organizationalPerson", "inetOrgPerson"],
            "ou": "os2mo",
            "cn": "Aage Bach Klarskov",
            "sn": "Bach Klarskov",
            "employeeNumber": cpr,
            "givenName": given_name,
        },
    )
    mo_employee = {
        "uuid": ANY,
        "user_key": ANY,
        "cpr_number": cpr,
        "given_name": given_name,
        "surname": "Bach Klarskov",
        "nickname_given_name": "foo",
        "nickname_surname": "bar",
    }
    async for attempt in retrying():
        with attempt:
            assert await get_employee() == mo_employee

    # LDAP: Edit
    given_name = "edit"
    await ldap_api.ldap_connection.ldap_modify(
        dn=person_dn,
        changes={
            "givenName": [("MODIFY_REPLACE", given_name)],
        },
    )
    mo_employee = {
        **mo_employee,
        "given_name": given_name,
    }
    async for attempt in retrying():
        with attempt:
            assert await get_employee() == mo_employee
