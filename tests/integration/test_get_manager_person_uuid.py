# SPDX-FileCopyrightText: Magenta ApS <https://magenta.dk>
# SPDX-License-Identifier: MPL-2.0
from uuid import UUID
from uuid import uuid4

import pytest
from structlog.testing import capture_logs

from mo_ldap_import_export.autogenerated_graphql_client.input_types import (
    EmployeeCreateInput,
)
from mo_ldap_import_export.autogenerated_graphql_client.input_types import (
    EngagementCreateInput,
)
from mo_ldap_import_export.autogenerated_graphql_client.input_types import (
    ManagerCreateInput,
)
from mo_ldap_import_export.depends import GraphQLClient
from mo_ldap_import_export.environments import get_manager_person_uuid
from mo_ldap_import_export.types import EngagementUUID


@pytest.mark.integration_test
@pytest.mark.envvar(
    {
        "LISTEN_TO_CHANGES_IN_MO": "False",
        "LISTEN_TO_CHANGES_IN_LDAP": "False",
    }
)
@pytest.mark.usefixtures("test_client")
async def test_get_manager_person_uuid_invalid_engagement(
    graphql_client: GraphQLClient,
) -> None:
    with capture_logs() as cap_logs:
        result = await get_manager_person_uuid(
            graphql_client, engagement_uuid=EngagementUUID(uuid4())
        )
    assert result is None

    events = [m["event"] for m in cap_logs]
    assert events == ["Invalid engagement"]


@pytest.mark.integration_test
@pytest.mark.envvar(
    {
        "LISTEN_TO_CHANGES_IN_MO": "False",
        "LISTEN_TO_CHANGES_IN_LDAP": "False",
    }
)
@pytest.mark.usefixtures("test_client")
async def test_get_manager_person_uuid_past_engagement(
    graphql_client: GraphQLClient,
    mo_person: UUID,
    mo_org_unit: UUID,
    ansat: UUID,
    jurist: UUID,
    primary: UUID,
) -> None:
    engagement = await graphql_client.engagement_create(
        input=EngagementCreateInput(
            user_key="terminated_engagement",
            person=mo_person,
            org_unit=mo_org_unit,
            engagement_type=ansat,
            job_function=jurist,
            primary=primary,
            validity={"from": "2001-02-03T04:05:06Z", "to": "2002-03-04T05:06:07Z"},
        )
    )
    with capture_logs() as cap_logs:
        result = await get_manager_person_uuid(
            graphql_client, engagement_uuid=EngagementUUID(engagement.uuid)
        )
    assert result is None

    events = [m["event"] for m in cap_logs]
    assert events == ["Invalid engagement"]


@pytest.mark.integration_test
@pytest.mark.envvar(
    {
        "LISTEN_TO_CHANGES_IN_MO": "False",
        "LISTEN_TO_CHANGES_IN_LDAP": "False",
    }
)
@pytest.mark.usefixtures("test_client")
async def test_get_manager_person_uuid_future_engagement(
    graphql_client: GraphQLClient,
    mo_person: UUID,
    mo_org_unit: UUID,
    ansat: UUID,
    jurist: UUID,
    primary: UUID,
) -> None:
    engagement = await graphql_client.engagement_create(
        input=EngagementCreateInput(
            user_key="terminated_engagement",
            person=mo_person,
            org_unit=mo_org_unit,
            engagement_type=ansat,
            job_function=jurist,
            primary=primary,
            validity={"from": "3000-01-01T00:00:00Z"},
        )
    )
    with capture_logs() as cap_logs:
        result = await get_manager_person_uuid(
            graphql_client, engagement_uuid=EngagementUUID(engagement.uuid)
        )
    assert result is None

    events = [m["event"] for m in cap_logs]
    assert events == ["Invalid engagement"]


@pytest.mark.integration_test
@pytest.mark.envvar(
    {
        "LISTEN_TO_CHANGES_IN_MO": "False",
        "LISTEN_TO_CHANGES_IN_LDAP": "False",
    }
)
@pytest.mark.usefixtures("test_client")
async def test_get_manager_person_uuid_current_engagement_no_manager(
    graphql_client: GraphQLClient,
    mo_person: UUID,
    mo_org_unit: UUID,
    ansat: UUID,
    jurist: UUID,
    primary: UUID,
) -> None:
    engagement = await graphql_client.engagement_create(
        input=EngagementCreateInput(
            user_key="terminated_engagement",
            person=mo_person,
            org_unit=mo_org_unit,
            engagement_type=ansat,
            job_function=jurist,
            primary=primary,
            validity={"from": "2000-01-01T00:00:00Z"},
        )
    )
    with capture_logs() as cap_logs:
        result = await get_manager_person_uuid(
            graphql_client, engagement_uuid=EngagementUUID(engagement.uuid)
        )
    assert result is None

    events = [m["event"] for m in cap_logs]
    assert events == ["No manager relation found"]


@pytest.mark.integration_test
@pytest.mark.envvar(
    {
        "LISTEN_TO_CHANGES_IN_MO": "False",
        "LISTEN_TO_CHANGES_IN_LDAP": "False",
    }
)
@pytest.mark.usefixtures("test_client")
async def test_get_manager_person_uuid_current_engagement_self_manager(
    graphql_client: GraphQLClient,
    mo_person: UUID,
    mo_org_unit: UUID,
    ansat: UUID,
    jurist: UUID,
    primary: UUID,
) -> None:
    engagement = await graphql_client.engagement_create(
        input=EngagementCreateInput(
            user_key="terminated_engagement",
            person=mo_person,
            org_unit=mo_org_unit,
            engagement_type=ansat,
            job_function=jurist,
            primary=primary,
            validity={"from": "2000-01-01T00:00:00Z"},
        )
    )

    await graphql_client._testing__manager_create(
        ManagerCreateInput(
            user_key="vacant",
            org_unit=mo_org_unit,
            responsibility=[],
            manager_level=uuid4(),
            manager_type=uuid4(),
            validity={"from": "2000-01-01T00:00:00Z"},
            person=mo_person,
        )
    )

    with capture_logs() as cap_logs:
        result = await get_manager_person_uuid(
            graphql_client, engagement_uuid=EngagementUUID(engagement.uuid)
        )
    assert result is None

    events = [m["event"] for m in cap_logs]
    assert events == ["No manager relation found"]


@pytest.mark.integration_test
@pytest.mark.envvar(
    {
        "LISTEN_TO_CHANGES_IN_MO": "False",
        "LISTEN_TO_CHANGES_IN_LDAP": "False",
    }
)
@pytest.mark.usefixtures("test_client")
async def test_get_manager_person_uuid_current_engagement_vacant_manager(
    graphql_client: GraphQLClient,
    mo_person: UUID,
    mo_org_unit: UUID,
    ansat: UUID,
    jurist: UUID,
    primary: UUID,
) -> None:
    engagement = await graphql_client.engagement_create(
        input=EngagementCreateInput(
            user_key="terminated_engagement",
            person=mo_person,
            org_unit=mo_org_unit,
            engagement_type=ansat,
            job_function=jurist,
            primary=primary,
            validity={"from": "2000-01-01T00:00:00Z"},
        )
    )

    await graphql_client._testing__manager_create(
        ManagerCreateInput(
            user_key="vacant",
            org_unit=mo_org_unit,
            responsibility=[],
            manager_level=uuid4(),
            manager_type=uuid4(),
            validity={"from": "2000-01-01T00:00:00Z"},
        )
    )

    with capture_logs() as cap_logs:
        result = await get_manager_person_uuid(
            graphql_client, engagement_uuid=EngagementUUID(engagement.uuid)
        )
    assert result is None

    events = [m["event"] for m in cap_logs]
    assert events == ["Vacant manager found"]


@pytest.mark.integration_test
@pytest.mark.envvar(
    {
        "LISTEN_TO_CHANGES_IN_MO": "False",
        "LISTEN_TO_CHANGES_IN_LDAP": "False",
    }
)
@pytest.mark.usefixtures("test_client")
async def test_get_manager_person_uuid_current_engagement_past_manager(
    graphql_client: GraphQLClient,
    mo_person: UUID,
    mo_org_unit: UUID,
    ansat: UUID,
    jurist: UUID,
    primary: UUID,
) -> None:
    engagement = await graphql_client.engagement_create(
        input=EngagementCreateInput(
            user_key="terminated_engagement",
            person=mo_person,
            org_unit=mo_org_unit,
            engagement_type=ansat,
            job_function=jurist,
            primary=primary,
            validity={"from": "2000-01-01T00:00:00Z"},
        )
    )

    manager_person = await graphql_client.user_create(
        input=EmployeeCreateInput(
            given_name="Boss",
            surname="Supervisor",
            cpr_number="0101701234",
        )
    )

    await graphql_client._testing__manager_create(
        ManagerCreateInput(
            user_key="vacant",
            org_unit=mo_org_unit,
            responsibility=[],
            manager_level=uuid4(),
            manager_type=uuid4(),
            validity={"from": "2001-02-03T04:05:06Z", "to": "2002-03-04T05:06:07Z"},
            person=manager_person.uuid,
        )
    )

    with capture_logs() as cap_logs:
        result = await get_manager_person_uuid(
            graphql_client, engagement_uuid=EngagementUUID(engagement.uuid)
        )
    assert result is None

    events = [m["event"] for m in cap_logs]
    assert events == ["No manager relation found"]


@pytest.mark.integration_test
@pytest.mark.envvar(
    {
        "LISTEN_TO_CHANGES_IN_MO": "False",
        "LISTEN_TO_CHANGES_IN_LDAP": "False",
    }
)
@pytest.mark.usefixtures("test_client")
async def test_get_manager_person_uuid_current_engagement_future_manager(
    graphql_client: GraphQLClient,
    mo_person: UUID,
    mo_org_unit: UUID,
    ansat: UUID,
    jurist: UUID,
    primary: UUID,
) -> None:
    engagement = await graphql_client.engagement_create(
        input=EngagementCreateInput(
            user_key="terminated_engagement",
            person=mo_person,
            org_unit=mo_org_unit,
            engagement_type=ansat,
            job_function=jurist,
            primary=primary,
            validity={"from": "2000-01-01T00:00:00Z"},
        )
    )

    manager_person = await graphql_client.user_create(
        input=EmployeeCreateInput(
            given_name="Boss",
            surname="Supervisor",
            cpr_number="0101701234",
        )
    )

    await graphql_client._testing__manager_create(
        ManagerCreateInput(
            user_key="vacant",
            org_unit=mo_org_unit,
            responsibility=[],
            manager_level=uuid4(),
            manager_type=uuid4(),
            validity={"from": "3000-01-01T00:00:00Z"},
            person=manager_person.uuid,
        )
    )

    with capture_logs() as cap_logs:
        result = await get_manager_person_uuid(
            graphql_client, engagement_uuid=EngagementUUID(engagement.uuid)
        )
    assert result is None

    events = [m["event"] for m in cap_logs]
    assert events == ["No manager relation found"]


@pytest.mark.integration_test
@pytest.mark.envvar(
    {
        "LISTEN_TO_CHANGES_IN_MO": "False",
        "LISTEN_TO_CHANGES_IN_LDAP": "False",
    }
)
@pytest.mark.usefixtures("test_client")
async def test_get_manager_person_uuid_current_engagement_current_manager(
    graphql_client: GraphQLClient,
    mo_person: UUID,
    mo_org_unit: UUID,
    ansat: UUID,
    jurist: UUID,
    primary: UUID,
) -> None:
    engagement = await graphql_client.engagement_create(
        input=EngagementCreateInput(
            user_key="terminated_engagement",
            person=mo_person,
            org_unit=mo_org_unit,
            engagement_type=ansat,
            job_function=jurist,
            primary=primary,
            validity={"from": "2000-01-01T00:00:00Z"},
        )
    )

    manager_person = await graphql_client.user_create(
        input=EmployeeCreateInput(
            given_name="Boss",
            surname="Supervisor",
            cpr_number="0101701234",
        )
    )

    await graphql_client._testing__manager_create(
        ManagerCreateInput(
            user_key="vacant",
            org_unit=mo_org_unit,
            responsibility=[],
            manager_level=uuid4(),
            manager_type=uuid4(),
            validity={"from": "2000-01-01T00:00:00Z"},
            person=manager_person.uuid,
        )
    )

    result = await get_manager_person_uuid(
        graphql_client, engagement_uuid=EngagementUUID(engagement.uuid)
    )
    assert result == manager_person.uuid


@pytest.mark.integration_test
@pytest.mark.envvar(
    {
        "LISTEN_TO_CHANGES_IN_MO": "False",
        "LISTEN_TO_CHANGES_IN_LDAP": "False",
    }
)
@pytest.mark.usefixtures("test_client")
async def test_get_manager_person_uuid_current_engagement_current_manager_filtered(
    graphql_client: GraphQLClient,
    mo_person: UUID,
    mo_org_unit: UUID,
    ansat: UUID,
    jurist: UUID,
    primary: UUID,
) -> None:
    engagement = await graphql_client.engagement_create(
        input=EngagementCreateInput(
            user_key="terminated_engagement",
            person=mo_person,
            org_unit=mo_org_unit,
            engagement_type=ansat,
            job_function=jurist,
            primary=primary,
            validity={"from": "2000-01-01T00:00:00Z"},
        )
    )

    manager_person = await graphql_client.user_create(
        input=EmployeeCreateInput(
            given_name="Boss",
            surname="Supervisor",
            cpr_number="0101701234",
        )
    )

    await graphql_client._testing__manager_create(
        ManagerCreateInput(
            user_key="vacant",
            org_unit=mo_org_unit,
            responsibility=[],
            manager_level=uuid4(),
            manager_type=uuid4(),
            validity={"from": "2000-01-01T00:00:00Z"},
            person=manager_person.uuid,
        )
    )

    with capture_logs() as cap_logs:
        result = await get_manager_person_uuid(
            graphql_client,
            engagement_uuid=EngagementUUID(engagement.uuid),
            filter={"uuids": [str(uuid4())]},
        )
    assert result is None

    events = [m["event"] for m in cap_logs]
    assert events == ["No manager relation found"]
