# SPDX-FileCopyrightText: Magenta ApS <https://magenta.dk>
# SPDX-License-Identifier: MPL-2.0
from datetime import datetime
from uuid import UUID

import pytest

from mo_ldap_import_export.autogenerated_graphql_client.input_types import (
    OrganisationUnitCreateInput,
)
from mo_ldap_import_export.autogenerated_graphql_client.input_types import (
    RAValidityInput,
)
from mo_ldap_import_export.depends import GraphQLClient
from mo_ldap_import_export.environments.main import load_org_unit
from mo_ldap_import_export.moapi import MOAPI
from mo_ldap_import_export.models import OrganisationUnit
from mo_ldap_import_export.models import Validity
from mo_ldap_import_export.utils import MO_TZ


@pytest.mark.integration_test
@pytest.mark.usefixtures("test_client")
async def test_load_org_unit(
    mo_api: MOAPI,
    graphql_client: GraphQLClient,
    mo_org_unit: UUID,
    afdeling: UUID,
) -> None:
    org_unit = await graphql_client.org_unit_create(
        input=OrganisationUnitCreateInput(
            user_key="foo",
            name="foo",
            parent=mo_org_unit,
            org_unit_type=afdeling,
            validity=RAValidityInput(
                from_=datetime(2020, 1, 1),
                to=datetime(2030, 1, 1),
            ),
        )
    )

    result = await load_org_unit(mo_api, org_unit.uuid)
    assert result is not None
    assert result == OrganisationUnit(
        uuid=org_unit.uuid,
        user_key="foo",
        name="foo",
        parent=mo_org_unit,
        unit_type=afdeling,
        validity=Validity(
            start=datetime(2020, 1, 1, tzinfo=MO_TZ),
            end=datetime(2030, 1, 1, tzinfo=MO_TZ),
        ),
    )


@pytest.mark.integration_test
@pytest.mark.usefixtures("test_client")
async def test_load_org_unit_terminated(
    mo_api: MOAPI,
    graphql_client: GraphQLClient,
    mo_org_unit: UUID,
    afdeling: UUID,
) -> None:
    org_unit = await graphql_client.org_unit_create(
        input=OrganisationUnitCreateInput(
            user_key="foo",
            name="foo",
            parent=mo_org_unit,
            org_unit_type=afdeling,
            validity=RAValidityInput(
                from_=datetime(1990, 1, 1),
                to=datetime(2000, 1, 1),
            ),
        )
    )

    result = await load_org_unit(mo_api, org_unit.uuid)
    assert result is None
