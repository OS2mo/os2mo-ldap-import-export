# SPDX-FileCopyrightText: Magenta ApS <https://magenta.dk>
# SPDX-License-Identifier: MPL-2.0
import json
from collections.abc import Awaitable
from collections.abc import Callable
from typing import Any
from typing import cast
from unittest.mock import ANY
from uuid import UUID

import pytest
from fastramqpi.pytest_util import retry
from httpx import AsyncClient
from ldap3 import Connection
from more_itertools import one
from structlog.testing import capture_logs

from mo_ldap_import_export.autogenerated_graphql_client import EmployeeCreateInput
from mo_ldap_import_export.autogenerated_graphql_client import EmployeeFilter
from mo_ldap_import_export.autogenerated_graphql_client import EmployeeUpdateInput
from mo_ldap_import_export.autogenerated_graphql_client import GraphQLClient
from mo_ldap_import_export.autogenerated_graphql_client.input_types import (
    ITSystemFilter,
)
from mo_ldap_import_export.autogenerated_graphql_client.input_types import ITUserFilter
from mo_ldap_import_export.depends import Settings
from mo_ldap_import_export.ldap import get_ldap_object
from mo_ldap_import_export.ldap import ldap_add
from mo_ldap_import_export.ldap import ldap_modify
from mo_ldap_import_export.ldap import ldap_search
from mo_ldap_import_export.moapi import MOAPI
from mo_ldap_import_export.types import EmployeeUUID
from mo_ldap_import_export.utils import combine_dn_strings
from mo_ldap_import_export.utils import mo_today


@pytest.fixture
async def assert_mo_person(mo_person: UUID, graphql_client: GraphQLClient) -> Callable[[dict[str, Any]], Awaitable[None]]:

    @retry()
    async def assert_employee(expected: dict[str, Any]) -> None:
        employees = await graphql_client._testing__employee_read(
            filter=EmployeeFilter(uuids=[mo_person])
        )
        employee = one(employees.objects)
        validities = one(employee.validities)
        assert validities.dict() == expected

    return assert_employee


@pytest.fixture
async def assert_ldap_person(ldap_person_uuid: UUID, ldap_org: list[str], ldap_connection: Connection, settings: Settings, graphql_client: GraphQLClient) -> Callable[[dict[str, Any]], Awaitable[None]]:

    @retry()
    async def assert_employee(expected: dict[str, Any]) -> None:
        response, _ = await ldap_search(
            ldap_connection,
            search_base=combine_dn_strings(ldap_org),
            search_filter=f"({settings.ldap_unique_id_field}={ldap_person_uuid})",
            attributes=[
                "employeeNumber",
                "carLicense",
                "uid",
                "cn",
                "sn",
                "givenName",
                "displayName",
            ],
        )
        employee = one(response)
        assert employee["attributes"] == expected

    return assert_employee


@pytest.mark.integration_test
@pytest.mark.envvar(
    {
        "LISTEN_TO_CHANGES_IN_MO": "True",
        "LISTEN_TO_CHANGES_IN_LDAP": "True",
        "CONVERSION_MAPPING": json.dumps(
            {
                "ldap_to_mo": {
                    "Employee": {
                        "objectClass": "Employee",
                        "_import_to_mo_": "true",
                        "_ldap_attributes_": ["employeeNumber", "givenName", "sn"],
                        "uuid": "{{ employee_uuid or '' }}",  # TODO: why is this required?
                        "cpr_number": "{{ ldap.employeeNumber }}",
                        "given_name": "{{ ldap.givenName }}",
                        "surname": "{{ ldap.sn }}",
                        "nickname_surname": "{{ ldap.carLicense }}"
                    },
                },
                "mo2ldap": """
                    {% set mo_employee = load_mo_employee(uuid, current_objects_only=False) %}
                    {{
                        {
                            "displayName": mo_employee.nickname_given_name
                        }|tojson
                    }}
                """,
                # TODO: why is this required?
                "username_generator": {
                    "combinations_to_try": ["FFFX", "LLLX"],
                },
            }
        ),
    }
)
async def test_to_mo(
    ldap_connection: Connection,
    graphql_client: GraphQLClient,
    assert_mo_person: Callable[[dict[str, Any]], Awaitable[None]],
    assert_ldap_person: Callable[[dict[str, Any]], Awaitable[None]],
    ldap_person_uuid: UUID,
    mo_person: UUID,
) -> None:
    await assert_mo_person(
        {
            "uuid": ANY,
            "user_key": ANY,
            "cpr_number": ANY,
            "given_name": "Aage",
            "surname": "Bach Klarskov",
        }
    )
    await assert_ldap_person(
        {
            "uid": ["2108613133"],
            "cn": ["create Mustermann"],
            "sn": ["Mustermann"],
        },
    )
