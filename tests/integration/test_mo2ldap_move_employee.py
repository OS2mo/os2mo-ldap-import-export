# SPDX-FileCopyrightText: Magenta ApS <https://magenta.dk>
# SPDX-License-Identifier: MPL-2.0
import json
from collections.abc import Awaitable
from collections.abc import Callable
from uuid import UUID

import pytest
from ldap3 import Connection

from mo_ldap_import_export.autogenerated_graphql_client import EngagementCreateInput
from mo_ldap_import_export.autogenerated_graphql_client import GraphQLClient
from mo_ldap_import_export.autogenerated_graphql_client.input_types import (
    ITUserCreateInput,
)
from mo_ldap_import_export.ldap import ldap_modify_dn
from mo_ldap_import_export.types import LDAPUUID
from mo_ldap_import_export.utils import combine_dn_strings
from tests.integration.conftest import UUID2DN


@pytest.mark.integration_test
@pytest.mark.envvar(
    {
        "LISTEN_TO_CHANGES_IN_MO": "False",
        "LISTEN_TO_CHANGES_IN_LDAP": "False",
        "CONVERSION_MAPPING": json.dumps(
            {
                "mo2ldap": """
                {% set mo_employee_engagement = load_mo_primary_engagement(uuid) %}
                {% if not mo_employee_engagement is none %}
                    {% set mo_org_unit_uuid = mo_employee_engagement.org_unit %}
                    {% set ldap_org_unit_uuid = get_ituser_uuid({"org_units": [mo_org_unit_uuid]}) %}
                    {% set mo_org_unit_dn = uuid_to_dn(ldap_org_unit_uuid) %}
                    {% set parent_ok = (parent_dn(dn) == mo_org_unit_dn) %}
                    {% if not parent_ok %}
                        {{ set_new_superior(mo_org_unit_dn) }}
                    {% endif %}
                {% endif %}
                {{
                    {}|tojson
                }}
                """,
                # TODO: why is this required?
                "username_generator": {
                    "combinations_to_try": ["FFFX", "LLLX"],
                },
            }
        ),
    }
)
# TODO: Implement set_new_superior logic
@pytest.mark.usefixtures("test_client")
async def test_to_ldap(
    graphql_client: GraphQLClient,
    uuid2dn: UUID2DN,
    trigger_mo_person: Callable[[], Awaitable[None]],
    ldap_connection: Connection,
    mo_person: UUID,
    mo_org_unit: UUID,
    ldap_org: list[str],
    ldap_org_unit_uuid: LDAPUUID,
    ldap_person_uuid: LDAPUUID,
    ansat: UUID,
    jurist: UUID,
    primary: UUID,
    adtitle: UUID,  # TODO: Use another it-system
) -> None:
    ldap_person_dn = await uuid2dn(ldap_person_uuid)
    assert ldap_person_dn == "uid=abk,ou=os2mo,o=magenta,dc=magenta,dc=dk"

    await trigger_mo_person()

    ldap_person_dn = await uuid2dn(ldap_person_uuid)
    assert ldap_person_dn == "uid=abk,ou=os2mo,o=magenta,dc=magenta,dc=dk"

    # Link MO org-unit and LDAP org-unit together
    await graphql_client.ituser_create(
        input=ITUserCreateInput(
            uuid=ldap_org_unit_uuid,
            user_key="org_unit_link",
            org_unit=mo_org_unit,
            itsystem=adtitle,
            validity={"from": "1970-01-01T00:00:00Z"},
        )
    )

    # MO: Create engagement
    await graphql_client.engagement_create(
        input=EngagementCreateInput(
            user_key="create",
            person=mo_person,
            org_unit=mo_org_unit,
            engagement_type=ansat,
            job_function=jurist,
            primary=primary,
            validity={"from": "2001-02-03T04:05:06Z"},
        )
    )

    # The employee should now be moved
    await trigger_mo_person()

    ldap_person_dn = await uuid2dn(ldap_person_uuid)
    assert ldap_person_dn == "uid=abk,ou=os2mo,o=magenta,dc=magenta,dc=dk"

    # Move the employee to the wrong OU
    await ldap_modify_dn(
        ldap_connection,
        dn=ldap_person_dn,
        relative_dn="uid=abk",
        new_superior=combine_dn_strings(ldap_org),
    )
    ldap_person_dn = await uuid2dn(ldap_person_uuid)
    assert ldap_person_dn == "uid=abk,o=magenta,dc=magenta,dc=dk"

    # The employee should now be moved
    await trigger_mo_person()

    ldap_person_dn = await uuid2dn(ldap_person_uuid)
    assert ldap_person_dn == "uid=abk,ou=os2mo,o=magenta,dc=magenta,dc=dk"

    # Change the org-unit in MO (i.e. changing the mapping)
    # TODO

    # The employee should now be moved to the new org-unit via the new mapping
    await trigger_mo_person()

    ldap_person_dn = await uuid2dn(ldap_person_uuid)
    assert ldap_person_dn == "uid=abk,ou=os2mo,o=magenta,dc=magenta,dc=dk"
