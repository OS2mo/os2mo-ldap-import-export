# SPDX-FileCopyrightText: Magenta ApS <https://magenta.dk>
# SPDX-License-Identifier: MPL-2.0
import json
from collections.abc import Awaitable
from collections.abc import Callable
from typing import Any
from unittest.mock import ANY
from uuid import UUID
from uuid import uuid4

import pytest
from fastapi import FastAPI
from fastramqpi.main import FastRAMQPI
from fastramqpi.pytest_plugin import run_server
from fastramqpi.pytest_util import retrying
from fastramqpi.ramqp.mo import MOAMQPSystem
from ldap3 import Connection
from more_itertools import only

from mo_ldap_import_export.autogenerated_graphql_client.client import GraphQLClient
from mo_ldap_import_export.environments.main import refresh
from mo_ldap_import_export.ldap import LDAPConnection
from mo_ldap_import_export.utils import combine_dn_strings


@pytest.fixture
async def get_ldap_person(
    ldap_connection: Connection, ldap_org_unit: list[str]
) -> Callable[[UUID], Awaitable[dict[str, Any] | None]]:
    async def inner(mo_person_uuid: UUID) -> dict[str, Any] | None:
        connection = LDAPConnection(ldap_connection)
        response, _ = await connection.ldap_search(
            search_base=combine_dn_strings(ldap_org_unit),
            search_filter=f"(carLicense={mo_person_uuid})",
            attributes=["*"],
        )
        return only(response)

    return inner


@pytest.mark.integration_test
@pytest.mark.usefixtures("test_client")
async def test_refresh_wrong_collection(
    graphql_client: GraphQLClient,
    amqpsystem: MOAMQPSystem,
) -> None:
    with pytest.raises(ValueError) as exc_info:
        await refresh(graphql_client, amqpsystem, "__unknown__", set())
    assert "Unknown collection '__unknown__'" in str(exc_info.value)


@pytest.mark.integration_test
@pytest.mark.usefixtures("test_client")
@pytest.mark.parametrize(
    "collection", [123, 0.5, ["hello", "world"], {"hello": "world"}, {1, 2, 3}]
)
async def test_refresh_wrong_collection_type(
    graphql_client: GraphQLClient,
    amqpsystem: MOAMQPSystem,
    collection: Any,
) -> None:
    with pytest.raises(TypeError) as exc_info:
        await refresh(graphql_client, amqpsystem, collection, set())
    assert "'collection' must be a string" in str(exc_info.value)


@pytest.mark.integration_test
@pytest.mark.usefixtures("test_client")
@pytest.mark.parametrize(
    "uuids",
    [
        123,
        0.5,
        ["hello", "world"],
        {"hello": "world"},
        {1, 2, 3},
        [uuid4(), uuid4()],
        (uuid4(), uuid4()),
    ],
)
async def test_refresh_wrong_uuids_type(
    graphql_client: GraphQLClient,
    amqpsystem: MOAMQPSystem,
    uuids: Any,
) -> None:
    with pytest.raises(TypeError) as exc_info:
        await refresh(graphql_client, amqpsystem, "person", uuids)
    assert "'uuids' must be a set of UUIDs" in str(exc_info.value)


@pytest.mark.integration_test
@pytest.mark.usefixtures("test_client")
async def test_refresh_no_uuids(
    graphql_client: GraphQLClient,
    amqpsystem: MOAMQPSystem,
) -> None:
    await refresh(graphql_client, amqpsystem, "class", set())


@pytest.mark.integration_test
@pytest.mark.envvar(
    {
        "LISTEN_TO_CHANGES_IN_MO": "True",
        "LISTEN_TO_CHANGES_IN_LDAP": "False",
        "CONVERSION_MAPPING": json.dumps(
            {
                "mo_to_ldap": [
                    {
                        "identifier": "person2person",
                        "routing_key": "person",
                        "object_class": "inetOrgPerson",
                        "template": """
                        {% set mo_employee = load_mo_employee(uuid, current_objects_only=False) %}
                        {% set dn = get_person_dn(uuid) %}
                        {% set create = False %}
                        {% if not dn %}
                            {% set dn = generate_dn(uuid, mo_employee.cpr_number) %}
                            {% set create = True %}
                        {% endif %}

                        {{
                            {
                                "dn": dn,
                                "create": create,
                                "attributes": {
                                    "employeeNumber": mo_employee.cpr_number,
                                    "carLicense": mo_employee.uuid|string,
                                    "uid": mo_employee.cpr_number,
                                    "cn": mo_employee.given_name + " " + mo_employee.surname,
                                    "sn": mo_employee.surname,
                                    "givenName": mo_employee.given_name,
                                    "displayName": mo_employee.nickname_given_name + " " + mo_employee.nickname_surname
                                }
                            }|tojson
                        }}
                    """,
                    },
                ],
                "username_generator": {
                    "combinations_to_try": ["FFFX", "LLLX"],
                },
            }
        ),
    }
)
async def test_refresh_graphql(
    amqp_emit_events: Callable[[], Awaitable[None]],
    get_ldap_person: Callable[[UUID], Awaitable[dict[str, Any] | None]],
    graphql_client: GraphQLClient,
    mo_person: UUID,
    fastramqpi: FastRAMQPI,
    app: FastAPI,
) -> None:
    # One shot emit events to ensure all fixture events have been fired
    await amqp_emit_events()

    # Check that no LDAP person exists for the mo_person
    ldap_person = await get_ldap_person(mo_person)
    assert ldap_person is None

    # Start the integration
    async with run_server(app):
        amqpsystem = fastramqpi.get_amqpsystem()
        # This test should fail with a timeout if the below line is removed
        await refresh(graphql_client, amqpsystem, "person", {mo_person})

        async for attempt in retrying():
            with attempt:
                ldap_person = await get_ldap_person(mo_person)
                assert ldap_person is not None

    # TODO: Why is DN here different from the following test
    assert ldap_person == {
        "raw_dn": ANY,
        "dn": "cn=2108613133,ou=os2mo,o=magenta,dc=magenta,dc=dk",
        "raw_attributes": ANY,
        "attributes": {
            "carLicense": [str(mo_person)],
            "displayName": " ",
            "employeeNumber": "2108613133",
            "givenName": ["Aage"],
            "sn": ["Bach Klarskov"],
            "uid": ["2108613133"],
            "objectClass": ["inetOrgPerson"],
            "cn": ["2108613133"],
        },
        "type": "searchResEntry",
    }


@pytest.mark.integration_test
@pytest.mark.envvar(
    {
        "LISTEN_TO_CHANGES_IN_MO": "True",
        "LISTEN_TO_CHANGES_IN_LDAP": "False",
        "CONVERSION_MAPPING": json.dumps(
            {
                "mo2ldap": """
                    {% set mo_employee = load_mo_employee(uuid, current_objects_only=False) %}
                    {{
                        {
                            "employeeNumber": mo_employee.cpr_number,
                            "carLicense": mo_employee.uuid|string,
                            "uid": mo_employee.cpr_number,
                            "cn": mo_employee.given_name + " " + mo_employee.surname,
                            "sn": mo_employee.surname,
                            "givenName": mo_employee.given_name,
                            "displayName": mo_employee.nickname_given_name + " " + mo_employee.nickname_surname
                        }|tojson
                    }}
                """,
                "username_generator": {
                    "combinations_to_try": ["FFFX", "LLLX"],
                },
            }
        ),
    }
)
async def test_refresh_amqp(
    amqp_emit_events: Callable[[], Awaitable[None]],
    get_ldap_person: Callable[[UUID], Awaitable[dict[str, Any] | None]],
    graphql_client: GraphQLClient,
    mo_person: UUID,
    fastramqpi: FastRAMQPI,
    app: FastAPI,
) -> None:
    # One shot emit events to ensure all fixture events have been fired
    await amqp_emit_events()

    # Check that no LDAP person exists for the mo_person
    ldap_person = await get_ldap_person(mo_person)
    assert ldap_person is None

    # Start the integration
    async with run_server(app):
        amqpsystem = fastramqpi.get_amqpsystem()
        # This test should fail with a timeout if the below line is removed
        await refresh(graphql_client, amqpsystem, "person", {mo_person})

        async for attempt in retrying():
            with attempt:
                ldap_person = await get_ldap_person(mo_person)
                assert ldap_person is not None

    # TODO: Why is DN here different from the prior test
    assert ldap_person == {
        "raw_dn": ANY,
        "dn": "cn=Aage Bach Klarskov,ou=os2mo,o=magenta,dc=magenta,dc=dk",
        "raw_attributes": ANY,
        "attributes": {
            "carLicense": [str(mo_person)],
            "displayName": " ",
            "employeeNumber": "2108613133",
            "givenName": ["Aage"],
            "sn": ["Bach Klarskov"],
            "uid": ["2108613133"],
            "objectClass": ["inetOrgPerson"],
            "cn": ["Aage Bach Klarskov"],
        },
        "type": "searchResEntry",
    }
