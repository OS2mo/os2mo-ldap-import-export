# SPDX-FileCopyrightText: Magenta ApS <https://magenta.dk>
# SPDX-License-Identifier: MPL-2.0
from datetime import datetime
from uuid import UUID
from uuid import uuid4

import pytest

from mo_ldap_import_export.autogenerated_graphql_client import GraphQLClient
from mo_ldap_import_export.depends import Settings
from mo_ldap_import_export.moapi import MOAPI
from mo_ldap_import_export.models import Address
from mo_ldap_import_export.models import ITUser
from mo_ldap_import_export.utils import MO_TZ


@pytest.fixture
def moapi(graphql_client: GraphQLClient) -> MOAPI:
    settings = Settings()
    return MOAPI(settings, graphql_client)


@pytest.mark.integration_test
async def test_create_address_read_equivalence(
    moapi: MOAPI,
    mo_person: UUID,
    email_employee: UUID,
    public: UUID,
) -> None:
    address_uuid = uuid4()
    address = Address(
        uuid=address_uuid,
        user_key=str(address_uuid),
        value="test@example.com",
        person=mo_person,
        address_type=email_employee,
        visibility=public,
        validity={"from": datetime(1970, 1, 1, tzinfo=MO_TZ)},
    )
    await moapi.create([address])
    assert await moapi.load_mo_address(address_uuid) == address

    address = address.copy(update={"value": "modified@example.com"})
    await moapi.edit([address])
    assert await moapi.load_mo_address(address_uuid) == address


@pytest.mark.integration_test
async def test_create_address_ituser_read_equivalence(
    moapi: MOAPI,
    mo_person: UUID,
    email_employee: UUID,
    public: UUID,
    adtitle: UUID,
) -> None:
    ituser1_uuid = uuid4()
    ituser1 = ITUser(
        uuid=ituser1_uuid,
        user_key="1",
        itsystem=adtitle,
        person=mo_person,
        validity={"from": datetime(1970, 1, 1, tzinfo=MO_TZ)},
    )
    await moapi.create([ituser1])

    ituser2_uuid = uuid4()
    ituser2 = ITUser(
        uuid=ituser2_uuid,
        user_key="2",
        itsystem=adtitle,
        person=mo_person,
        validity={"from": datetime(1970, 1, 1, tzinfo=MO_TZ)},
    )
    await moapi.create([ituser2])

    address_uuid = uuid4()
    address = Address(
        uuid=address_uuid,
        user_key=str(address_uuid),
        value="test@example.com",
        person=mo_person,
        ituser=ituser1_uuid,
        address_type=email_employee,
        visibility=public,
        validity={"from": datetime(1970, 1, 1, tzinfo=MO_TZ)},
    )
    await moapi.create([address])
    assert await moapi.load_mo_address(address_uuid) == address

    # TODO: Enable this code to prove that the relation can be removed
    # address = address.copy(update={"ituser": None})
    # await moapi.edit([address])
    # assert await moapi.load_mo_address(address_uuid) == address

    address = address.copy(update={"ituser": ituser2_uuid})
    await moapi.edit([address])
    assert await moapi.load_mo_address(address_uuid) == address
