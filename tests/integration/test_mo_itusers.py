# SPDX-FileCopyrightText: Magenta ApS <https://magenta.dk>
# SPDX-License-Identifier: MPL-2.0

from datetime import datetime
from uuid import UUID

import pytest

from mo_ldap_import_export.autogenerated_graphql_client.input_types import (
    ITUserCreateInput,
)
from mo_ldap_import_export.autogenerated_graphql_client.input_types import (
    RAValidityInput,
)
from mo_ldap_import_export.autogenerated_graphql_client.itusers import ItusersItusers
from mo_ldap_import_export.autogenerated_graphql_client.itusers import (
    ItusersItusersObjects,
)
from mo_ldap_import_export.autogenerated_graphql_client.itusers import (
    ItusersItusersObjectsCurrent,
)
from mo_ldap_import_export.depends import GraphQLClient
from mo_ldap_import_export.environments.main import mo_itusers


@pytest.mark.integration_test
@pytest.mark.usefixtures("test_client")
async def test_mo_itusers(
    graphql_client: GraphQLClient,
    adtitle: UUID,
    mo_person: UUID,
) -> None:
    ituser = await graphql_client.ituser_create(
        input=ITUserCreateInput(
            itsystem=adtitle,
            user_key="foo",
            person=mo_person,
            external_id="bar",
            validity=RAValidityInput(
                from_=datetime(2020, 1, 1),
                to=None,
            ),
        ),
    )
    result = await mo_itusers(
        graphql_client,
        filter={
            "user_key": "foo",
        },
    )
    assert result == ItusersItusers(
        objects=[
            ItusersItusersObjects(
                uuid=ituser.uuid,
                current=ItusersItusersObjectsCurrent(
                    external_id="bar",
                ),
            )
        ]
    )
