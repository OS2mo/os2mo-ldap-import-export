# SPDX-FileCopyrightText: Magenta ApS <https://magenta.dk>
# SPDX-License-Identifier: MPL-2.0
from uuid import UUID

import pytest
from more_itertools import one
from structlog.testing import capture_logs

from mo_ldap_import_export.autogenerated_graphql_client.client import GraphQLClient
from mo_ldap_import_export.autogenerated_graphql_client.input_types import (
    AddressCreateInput,
)
from mo_ldap_import_export.environments.main import DARAddress
from mo_ldap_import_export.environments.main import resolve_dar_address

# Real DAR UUID for Silkeborgvej 260, 8230 Aabyhoej
SILKEBORGVEJ260 = "5bc8d53a-ac6f-4d57-ad53-10063f38cc17"


@pytest.fixture
async def dar_employee(graphql_client: GraphQLClient) -> UUID:
    return one(
        (
            await graphql_client.read_class_uuid_by_facet_and_class_user_key(
                "employee_address_type", "AdressePostEmployee"
            )
        ).objects
    ).uuid


@pytest.mark.integration_test
async def test_resolve_dar_unknown_address(graphql_client: GraphQLClient) -> None:
    random_uuid = "11ed4a0d-76b8-4f89-bd3c-38a0673dec1d"
    result = await resolve_dar_address(graphql_client, filter={"uuids": [random_uuid]})
    assert result == []


@pytest.mark.integration_test
async def test_resolve_dar_non_active_future(
    graphql_client: GraphQLClient, mo_person: UUID, dar_employee: UUID, public: UUID
) -> None:
    address = await graphql_client.address_create(
        input=AddressCreateInput(
            user_key="address1",
            address_type=dar_employee,
            value=SILKEBORGVEJ260,
            person=mo_person,
            visibility=public,
            validity={"from": "3001-02-03T04:05:06Z"},
        )
    )

    result = await resolve_dar_address(graphql_client, filter={"uuids": [address.uuid]})
    assert result == []


@pytest.mark.integration_test
async def test_resolve_dar_non_active_past(
    graphql_client: GraphQLClient, mo_person: UUID, dar_employee: UUID, public: UUID
) -> None:
    address = await graphql_client.address_create(
        input=AddressCreateInput(
            user_key="address1",
            address_type=dar_employee,
            value=SILKEBORGVEJ260,
            person=mo_person,
            visibility=public,
            validity={"from": "1971-02-03T04:05:06Z", "to": "2000-01-01T00:00:00Z"},
        )
    )

    result = await resolve_dar_address(graphql_client, filter={"uuids": [address.uuid]})
    assert result == []


@pytest.mark.integration_test
async def test_resolve_dar_non_dar(
    graphql_client: GraphQLClient, mo_person: UUID, email_employee: UUID, public: UUID
) -> None:
    address = await graphql_client.address_create(
        input=AddressCreateInput(
            user_key="address1",
            address_type=email_employee,
            value="person@example.com",
            person=mo_person,
            visibility=public,
            validity={"from": "2001-02-03T04:05:06Z"},
        )
    )

    with capture_logs() as cap_logs:
        result = await resolve_dar_address(
            graphql_client, filter={"uuids": [address.uuid]}
        )
        assert result == []

    assert cap_logs == [
        {
            "event": "Resolved address is not a DAR address",
            "log_level": "warning",
            "uuid": address.uuid,
        }
    ]


@pytest.mark.integration_test
async def test_resolve_dar(
    graphql_client: GraphQLClient, mo_person: UUID, dar_employee: UUID, public: UUID
) -> None:
    address = await graphql_client.address_create(
        input=AddressCreateInput(
            user_key="address1",
            address_type=dar_employee,
            value=SILKEBORGVEJ260,
            person=mo_person,
            visibility=public,
            validity={"from": "2001-02-03T04:05:06Z"},
        )
    )

    result = await resolve_dar_address(graphql_client, filter={"uuids": [address.uuid]})
    assert result == [
        DARAddress(
            postal_code="8230",
            city="Åbyhøj",
            streetname="Silkeborgvej",
            house_number="260",
        ),
    ]
