# SPDX-FileCopyrightText: Magenta ApS <https://magenta.dk>
# SPDX-License-Identifier: MPL-2.0
import json
from collections.abc import Awaitable
from collections.abc import Callable
from typing import Any
from unittest.mock import ANY
from uuid import UUID

import pytest
from fastramqpi.pytest_util import retry
from ldap3 import Connection
from more_itertools import one

from mo_ldap_import_export.autogenerated_graphql_client import EmployeeFilter
from mo_ldap_import_export.autogenerated_graphql_client import EmployeeUpdateInput
from mo_ldap_import_export.autogenerated_graphql_client import GraphQLClient
from mo_ldap_import_export.depends import Settings
from mo_ldap_import_export.ldap import ldap_search
from mo_ldap_import_export.types import LDAPUUID
from mo_ldap_import_export.utils import combine_dn_strings


@pytest.fixture
async def assert_mo_person(
    mo_person: UUID, graphql_client: GraphQLClient
) -> Callable[[dict[str, Any]], Awaitable[None]]:
    @retry()
    async def assert_employee(expected: dict[str, Any]) -> None:
        employees = await graphql_client._testing__employee_read(
            filter=EmployeeFilter(uuids=[mo_person])
        )
        employee = one(employees.objects)
        validities = [validity.dict() for validity in employee.validities]
        assert validities == [expected]

    return assert_employee


@pytest.fixture
async def assert_ldap_person(
    ldap_person_uuid: LDAPUUID,
    ldap_org: list[str],
    ldap_connection: Connection,
) -> Callable[[dict[str, Any]], Awaitable[None]]:
    settings = Settings()

    @retry()
    async def assert_employee(expected: dict[str, Any]) -> None:
        response, _ = await ldap_search(
            ldap_connection,
            search_base=combine_dn_strings(ldap_org),
            search_filter=f"({settings.ldap_unique_id_field}={ldap_person_uuid})",
            attributes=[
                "employeeNumber",
                "carLicense",
                "uid",
                "cn",
                "sn",
                "givenName",
                "displayName",
            ],
        )
        employee = one(response)
        assert employee["attributes"] == expected

    return assert_employee


@pytest.mark.integration_test
@pytest.mark.envvar(
    {
        "LISTEN_TO_CHANGES_IN_MO": "False",
        "LISTEN_TO_CHANGES_IN_LDAP": "False",
        "CONVERSION_MAPPING": json.dumps(
            {
                "ldap_to_mo": {
                    "Employee": {
                        "objectClass": "Employee",
                        "_import_to_mo_": "true",
                        "_ldap_attributes_": ["employeeNumber", "givenName", "sn"],
                        "uuid": "{{ employee_uuid or '' }}",  # TODO: why is this required?
                        "cpr_number": "{{ ldap.employeeNumber }}",
                        "given_name": "{{ ldap.givenName }}",
                        "surname": "{{ ldap.sn }}",
                    },
                },
                # TODO: why is this required?
                "username_generator": {
                    "combinations_to_try": ["FFFX", "LLLX"],
                },
            }
        ),
    }
)
async def test_employee_patch_semantics(
    graphql_client: GraphQLClient,
    assert_mo_person: Callable[[dict[str, Any]], Awaitable[None]],
    assert_ldap_person: Callable[[dict[str, Any]], Awaitable[None]],
    trigger_ldap_person: Callable[[], Awaitable[None]],
    mo_person: UUID,
) -> None:
    # Assert our starting state in both MO and LDAP
    await assert_mo_person(
        {
            "uuid": ANY,
            "user_key": ANY,
            "cpr_number": "2108613133",
            "given_name": "Aage",
            "surname": "Bach Klarskov",
            "nickname_given_name": "",
            "nickname_surname": "",
        }
    )
    await assert_ldap_person(
        {
            "uid": ["abk"],
            "cn": ["Aage Bach Klarskov"],
            "givenName": ["Aage"],
            "sn": ["Bach Klarskov"],
            "employeeNumber": "2108613133",
            "carLicense": [],
            "displayName": [],
        }
    )

    # Update MO with a new name and nickname
    # Name is owned by LDAP and as such should be overwritten while nickname should not
    cpr = "2108613133"
    await graphql_client.user_update(
        input=EmployeeUpdateInput(
            uuid=mo_person,
            validity={"from": "2011-12-13T14:15:16Z"},
            # TODO: why is this required?
            cpr_number=cpr,
            # These two fields should be overwritten
            given_name="to be overwritten",
            surname="very soon",
            # These two fields should be kept as-is
            nickname_given_name="Manu",
            nickname_surname="Muster",
        )
    )
    await assert_mo_person(
        {
            "uuid": ANY,
            "user_key": ANY,
            "cpr_number": "2108613133",
            "given_name": "to be overwritten",
            "surname": "very soon",
            "nickname_given_name": "Manu",
            "nickname_surname": "Muster",
        }
    )

    # Force a sync to get trigger the LDAP synchronization
    await trigger_ldap_person()
    await assert_mo_person(
        {
            "uuid": ANY,
            "user_key": ANY,
            "cpr_number": "2108613133",
            # This was modified back
            "given_name": "Aage",
            "surname": "Bach Klarskov",
            "nickname_given_name": "",
            "nickname_surname": "",
        }
    )
