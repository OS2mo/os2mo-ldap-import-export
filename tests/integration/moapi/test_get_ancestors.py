# SPDX-FileCopyrightText: Magenta ApS <https://magenta.dk>
# SPDX-License-Identifier: MPL-2.0
"""Integration tests for MOAPI."""

from collections.abc import Awaitable
from collections.abc import Callable
from uuid import uuid4

import pytest

from mo_ldap_import_export.autogenerated_graphql_client import GraphQLClient
from mo_ldap_import_export.autogenerated_graphql_client.input_types import (
    OrganisationUnitCreateInput,
)
from mo_ldap_import_export.depends import Settings
from mo_ldap_import_export.moapi import MOAPI
from mo_ldap_import_export.types import OrgUnitUUID


@pytest.fixture
def moapi(graphql_client: GraphQLClient) -> MOAPI:
    settings = Settings()
    return MOAPI(settings, graphql_client)


@pytest.fixture
async def create_org_unit(
    graphql_client: GraphQLClient,
) -> Callable[[OrgUnitUUID | None], Awaitable[OrgUnitUUID]]:
    org_unit_type_uuid = uuid4()

    async def creator(parent: OrgUnitUUID | None = None) -> OrgUnitUUID:
        org_unit_uuid = uuid4()
        result = await graphql_client.org_unit_create(
            OrganisationUnitCreateInput(
                uuid=org_unit_uuid,
                name=str(org_unit_uuid),
                user_key=str(org_unit_uuid),
                parent=parent,
                org_unit_type=org_unit_type_uuid,
                validity={"from": "1970-01-01T00:00:00"},
            )
        )
        return OrgUnitUUID(result.uuid)

    return creator


@pytest.mark.parametrize(
    "child,expected",
    [
        ("root", []),
        ("l", ["root"]),
        ("ll", ["l", "root"]),
        ("lll", ["ll", "l", "root"]),
        ("lrr", ["lr", "l", "root"]),
        ("r", ["root"]),
        ("rr", ["r", "root"]),
        ("rrl", ["rr", "r", "root"]),
    ],
)
@pytest.mark.integration_test
@pytest.mark.usefixtures("test_client")
async def test_get_ancestors(
    moapi: MOAPI,
    create_org_unit: Callable[[OrgUnitUUID | None], Awaitable[OrgUnitUUID]],
    child: str,
    expected: list[str],
) -> None:
    #       root
    #       / \
    #      l   r
    #     / \   \
    #    ll lr  rr
    #   /   /  /  \
    # lll lrr rrl rrr
    parent_map = {
        "root": None,
        "l": "root",
        "ll": "l",
        "lr": "l",
        "lll": "ll",
        "lrr": "lr",
        "r": "root",
        "rr": "r",
        "rrl": "rr",
        "rrr": "rr",
    }
    uuid_map: dict[str, OrgUnitUUID] = {}
    for name, parent in parent_map.items():
        uuid_map[name] = OrgUnitUUID(await create_org_unit(uuid_map.get(parent)))  # type: ignore
    name_map = {value: key for key, value in uuid_map.items()}
    assert len(uuid_map) == len(name_map)

    ancestors = await moapi.get_ancestors(uuid_map[child])
    assert [name_map[uuid] for uuid in ancestors] == expected


@pytest.mark.integration_test
@pytest.mark.usefixtures("test_client")
async def test_get_ancestors_unknown_uuid(moapi: MOAPI) -> None:
    with pytest.raises(ValueError) as exc_info:
        await moapi.get_ancestors(OrgUnitUUID(uuid4()))
    assert "too few items in iterable" in str(exc_info.value)
