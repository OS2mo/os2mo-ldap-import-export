# SPDX-FileCopyrightText: Magenta ApS <https://magenta.dk>
# SPDX-License-Identifier: MPL-2.0
import json
from collections.abc import Awaitable
from collections.abc import Callable
from typing import cast

import pytest
from more_itertools import one

from mo_ldap_import_export.autogenerated_graphql_client import EmployeeCreateInput
from mo_ldap_import_export.autogenerated_graphql_client import GraphQLClient
from mo_ldap_import_export.ldapapi import LDAPAPI
from mo_ldap_import_export.types import EmployeeUUID
from mo_ldap_import_export.utils import combine_dn_strings


@pytest.mark.integration_test
@pytest.mark.envvar(
    {
        "LISTEN_TO_CHANGES_IN_MO": "False",
        "LISTEN_TO_CHANGES_IN_LDAP": "False",
        "CONVERSION_MAPPING": json.dumps(
            {
                "mo2ldap": """
                    {% set mo_employee = load_mo_employee(uuid, current_objects_only=False) %}

                    {% set update_dict = {
                        "employeeNumber": mo_employee.cpr_number,
                        "uid": mo_employee.cpr_number,
                        "cn": mo_employee.surname,
                        "sn": mo_employee.surname,
                    } %}

                    {% if not dn %}
                        {% set _ = update_dict.update(**{"givenName": "create"}) %}
                    {% else %}
                        {% set _ = update_dict.update(**{"givenName": "edit"}) %}
                    {% endif %}

                    {{update_dict|tojson}}
                """,
                # TODO: why is this required?
                "username_generator": {
                    "combinations_to_try": ["FFFX", "LLLX"],
                },
            }
        ),
    }
)
@pytest.mark.usefixtures("test_client")
async def test_to_ldap_create_and_edit_specific_operations(
    trigger_sync: Callable[[EmployeeUUID], Awaitable[None]],
    graphql_client: GraphQLClient,
    ldap_api: LDAPAPI,
    ldap_org_unit: list[str],
) -> None:
    async def fetch_given_name(cpr_number: str) -> str:
        response, _ = await ldap_api.ldap_connection.ldap_search(
            search_base=combine_dn_strings(ldap_org_unit),
            search_filter=f"(employeeNumber={cpr_number})",
            attributes=["givenName"],
        )
        employee = one(response)
        return cast(str, one(employee["attributes"]["givenName"]))

    mo_person_cpr_number = "0101700000"
    mo_person = await graphql_client.person_create(
        input=EmployeeCreateInput(
            cpr_number=mo_person_cpr_number,
            given_name="Lazarus",
            surname="Scorpius",
        )
    )

    await trigger_sync(EmployeeUUID(mo_person.uuid))
    given_name = await fetch_given_name(mo_person_cpr_number)
    assert given_name == "create"

    await trigger_sync(EmployeeUUID(mo_person.uuid))
    given_name = await fetch_given_name(mo_person_cpr_number)
    assert given_name == "edit"

    await trigger_sync(EmployeeUUID(mo_person.uuid))
    given_name = await fetch_given_name(mo_person_cpr_number)
    assert given_name == "edit"
