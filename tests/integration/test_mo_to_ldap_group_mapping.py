# SPDX-FileCopyrightText: Magenta ApS <https://magenta.dk>
# SPDX-License-Identifier: MPL-2.0
import json
from collections.abc import Awaitable
from collections.abc import Callable
from datetime import timedelta
from uuid import UUID

import pytest
from fastapi.encoders import jsonable_encoder
from fastramqpi.events import Event
from httpx import AsyncClient
from ldap3 import Connection
from more_itertools import one

from mo_ldap_import_export.autogenerated_graphql_client import GraphQLClient
from mo_ldap_import_export.autogenerated_graphql_client.input_types import (
    EmployeeCreateInput,
)
from mo_ldap_import_export.autogenerated_graphql_client.input_types import (
    ITUserCreateInput,
)
from mo_ldap_import_export.autogenerated_graphql_client.input_types import (
    ITUserTerminateInput,
)
from mo_ldap_import_export.ldap import LDAPConnection
from mo_ldap_import_export.types import DN
from mo_ldap_import_export.utils import combine_dn_strings
from mo_ldap_import_export.utils import mo_today
from tests.integration.conftest import AnyOrder


@pytest.fixture
async def trigger_sync(
    test_client: AsyncClient,
) -> Callable[[str, UUID], Awaitable[None]]:
    async def inner(identifier: str, uuid: UUID) -> None:
        result = await test_client.post(
            f"/mo_to_ldap/{identifier}",
            json=jsonable_encoder(Event(subject=uuid, priority=10)),
        )
        assert result.status_code == 200, result.text

    return inner


@pytest.fixture
async def get_groups(
    ldap_connection: Connection, ldap_org_unit: list[str]
) -> Callable[[], Awaitable[list[dict]]]:
    async def inner() -> list[dict]:
        connection = LDAPConnection(ldap_connection)
        response, _ = await connection.ldap_search(
            search_base=combine_dn_strings(ldap_org_unit),
            search_filter="(objectClass=groupOfNames)",
            attributes=["*"],
        )
        return response

    return inner


@pytest.mark.integration_test
@pytest.mark.envvar(
    {
        "LISTEN_TO_CHANGES_IN_MO": "False",
        "LISTEN_TO_CHANGES_IN_LDAP": "False",
        "CONVERSION_MAPPING": json.dumps(
            {
                "mo_to_ldap": [
                    {
                        "identifier": "itsystem2group",
                        "routing_key": "itsystem",
                        "object_class": "groupOfNames",
                        "template": """
                    {% set dn = "cn=" + uuid|string + ",ou=os2mo,o=magenta,dc=magenta,dc=dk" %}
                    {% set person_uuids = itsystem_uuid_to_person_uuids(uuid) %}
                    {% set dns = person_uuids|map('get_person_dn')|list %}

                    {% set exists = dn|dn_exists %}

                    {{
                        {
                            "dn": dn,
                            "create": not exists,
                            "attributes": {"member": dns}
                        }|tojson
                    }}
                """,
                    }
                ]
            }
        ),
    }
)
async def test_group_sync(
    trigger_sync: Callable[[str, UUID], Awaitable[None]],
    get_groups: Callable[[], Awaitable[list[dict]]],
    ldap_connection: Connection,
    graphql_client: GraphQLClient,
    mo_person: UUID,
    ldap_person_dn: DN,
    adtitle: UUID,
    ldap_org_unit: list[str],
) -> None:
    groups = await get_groups()
    assert len(groups) == 0

    await graphql_client.ituser_create(
        input=ITUserCreateInput(
            user_key=str(mo_person),
            itsystem=adtitle,
            person=mo_person,
            validity={"from": "2001-02-03T04:05:06Z"},
        )
    )

    await trigger_sync("itsystem2group", adtitle)

    ldap_object = one(await get_groups())
    group_dn = f"cn={str(adtitle)},ou=os2mo,o=magenta,dc=magenta,dc=dk"
    assert ldap_object["dn"] == group_dn
    expected = {
        "member": [ldap_person_dn],
        "objectClass": ["groupOfNames"],
        "cn": [str(adtitle)],
    }
    assert dict(ldap_object["attributes"]) == expected

    # Retrigger to see that both create and noop modify work
    await trigger_sync("itsystem2group", adtitle)
    ldap_object2 = one(await get_groups())
    assert ldap_object == ldap_object2

    # Create an additional user with an ituser in our it-system
    cpr_number = "0101700000"
    mo_employee = await graphql_client.person_create(
        input=EmployeeCreateInput(
            cpr_number=cpr_number,
            given_name="Brittany",
            surname="Wilder",
        )
    )
    ituser = await graphql_client.ituser_create(
        input=ITUserCreateInput(
            user_key=str(mo_employee.uuid),
            itsystem=adtitle,
            person=mo_employee.uuid,
            validity={"from": "2001-02-03T04:05:06Z"},
        )
    )
    person_dn = combine_dn_strings(["uid=bw"] + ldap_org_unit)
    connection = LDAPConnection(ldap_connection)
    await connection.ldap_add(
        dn=person_dn,
        object_class=["top", "person", "organizationalPerson", "inetOrgPerson"],
        attributes={
            "cn": "Brittany Wilder",
            "sn": "Wilder",
            "employeeNumber": cpr_number,
        },
    )

    # Check that the new person is added to the group
    await trigger_sync("itsystem2group", adtitle)
    ldap_object = one(await get_groups())
    assert ldap_object["dn"] == group_dn
    assert dict(ldap_object["attributes"]) == {
        **expected,
        "member": AnyOrder([ldap_person_dn, person_dn]),
    }

    # Remove the new it-user
    await graphql_client.ituser_terminate(
        input=ITUserTerminateInput(uuid=ituser.uuid, to=mo_today() - timedelta(days=1))
    )

    # Check that the new person has been removed from the group
    await trigger_sync("itsystem2group", adtitle)
    ldap_object = one(await get_groups())
    assert ldap_object["dn"] == group_dn
    assert dict(ldap_object["attributes"]) == expected
