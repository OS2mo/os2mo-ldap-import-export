# SPDX-FileCopyrightText: Magenta ApS <https://magenta.dk>
# SPDX-License-Identifier: MPL-2.0
from uuid import uuid4

import pytest
from pydantic import parse_obj_as

from mo_ldap_import_export.autogenerated_graphql_client.client import GraphQLClient
from mo_ldap_import_export.autogenerated_graphql_client.input_types import (
    OrganisationUnitCreateInput,
)
from mo_ldap_import_export.environments.main import get_org_unit_path_string
from mo_ldap_import_export.main import GRAPHQL_VERSION
from tests.graphql_mocker import GraphQLMocker


@pytest.mark.integration_test
@pytest.mark.usefixtures("test_client")
async def test_integration_get_org_unit_path_string(
    graphql_client: GraphQLClient,
) -> None:
    org_unit_type = uuid4()

    municipality = await graphql_client.org_unit_create(
        parse_obj_as(
            OrganisationUnitCreateInput,
            {
                "name": "Municipality",
                "org_unit_type": org_unit_type,
                "validity": {"from": "1970-01-01T00:00:00Z"},
            },
        )
    )
    childcare = await graphql_client.org_unit_create(
        parse_obj_as(
            OrganisationUnitCreateInput,
            {
                "parent": municipality.uuid,
                "name": "Childcare",
                "org_unit_type": org_unit_type,
                "validity": {"from": "1970-01-01T00:00:00Z"},
            },
        )
    )
    daycares = await graphql_client.org_unit_create(
        parse_obj_as(
            OrganisationUnitCreateInput,
            {
                "parent": childcare.uuid,
                "name": "Daycares",
                "org_unit_type": org_unit_type,
                "validity": {"from": "1970-01-01T00:00:00Z"},
            },
        )
    )
    windmill = await graphql_client.org_unit_create(
        parse_obj_as(
            OrganisationUnitCreateInput,
            {
                "parent": daycares.uuid,
                "name": "Windmill Daycare",
                "org_unit_type": org_unit_type,
                "validity": {"from": "1970-01-01T00:00:00Z"},
            },
        )
    )

    path = await get_org_unit_path_string(graphql_client, "\\", windmill.uuid)
    assert path == "Municipality\\Childcare\\Daycares\\Windmill Daycare"


async def test_get_org_unit_path_string(graphql_mock: GraphQLMocker) -> None:
    graphql_client = GraphQLClient(f"http://example.com/graphql/v{GRAPHQL_VERSION}")

    ancestors = [
        "Plejecenter Nord",
        "Plejecentre",
        "Sundhed",
        "Kolding Kommune",
    ]

    route = graphql_mock.query("read_org_unit_ancestor_names")
    route.result = {
        "org_units": {
            "objects": [
                {
                    "current": {
                        "name": "Teknik Nord",
                        "ancestors": [{"name": name} for name in ancestors],
                    }
                }
            ]
        }
    }

    path = await get_org_unit_path_string(graphql_client, "\\", uuid4())
    assert (
        path == "Kolding Kommune\\Sundhed\\Plejecentre\\Plejecenter Nord\\Teknik Nord"
    )
