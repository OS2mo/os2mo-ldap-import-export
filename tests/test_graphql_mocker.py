# SPDX-FileCopyrightText: Magenta ApS <https://magenta.dk>
# SPDX-License-Identifier: MPL-2.0
"""Test of the GraphQLMocker."""

from collections.abc import AsyncIterator
from uuid import uuid4

import pytest
from httpx import AsyncClient
from more_itertools import one

from mo_ldap_import_export.autogenerated_graphql_client import GraphQLClient
from mo_ldap_import_export.autogenerated_graphql_client.input_types import (
    ITSystemFilter,
)
from mo_ldap_import_export.main import GRAPHQL_VERSION
from tests.graphql_mocker import GraphQLMocker


@pytest.fixture
async def example_graphql_client() -> AsyncIterator[GraphQLClient]:
    mo_client = AsyncClient(base_url="http://example.com")
    graphql_client = GraphQLClient(
        url=f"/graphql/v{GRAPHQL_VERSION}",
        http_client=mo_client,
    )
    async with graphql_client as client:
        yield client


async def test_example_graphql_mocker(
    graphql_mock: GraphQLMocker,
    example_graphql_client: GraphQLClient,
) -> None:
    itsystem_uuid = uuid4()

    route = graphql_mock.query("read_itsystem_uuid")
    route.result = {"itsystems": {"objects": [{"uuid": itsystem_uuid}]}}

    result = await example_graphql_client.read_itsystem_uuid(filter=ITSystemFilter())
    assert one(result.objects).uuid == itsystem_uuid

    assert route.called
    assert route.request_variables == [{"filter": {}}]


@pytest.mark.integration_test
async def test_integration_graphql_mocker(
    graphql_mock: GraphQLMocker,
    graphql_client: GraphQLClient,
) -> None:
    itsystem_uuid = uuid4()

    route = graphql_mock.query("read_itsystem_uuid")
    route.result = {"itsystems": {"objects": [{"uuid": itsystem_uuid}]}}

    result = await graphql_client.read_itsystem_uuid(filter=ITSystemFilter())
    assert one(result.objects).uuid == itsystem_uuid

    assert route.called
    assert route.request_variables == [{"filter": {}}]
