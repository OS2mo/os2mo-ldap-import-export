# SPDX-FileCopyrightText: Magenta ApS <https://magenta.dk>
# SPDX-License-Identifier: MPL-2.0
from datetime import datetime
from datetime import timedelta
from unittest.mock import AsyncMock
from unittest.mock import MagicMock
from uuid import uuid4

import pytest
from fastramqpi.context import Context
from pydantic import parse_obj_as

from mo_ldap_import_export.autogenerated_graphql_client.read_class_uuid_by_facet_and_class_user_key import (
    ReadClassUuidByFacetAndClassUserKeyClasses,
)
from mo_ldap_import_export.autogenerated_graphql_client.read_engagements_by_employee_uuid import (
    ReadEngagementsByEmployeeUuidEngagements,
)
from mo_ldap_import_export.import_export import sync_JobTitleFromADToMO
from mo_ldap_import_export.moapi import MOAPI


@pytest.fixture
def context(
    dataloader: AsyncMock,
    converter: MagicMock,
    export_checks: AsyncMock,
    settings_mock: MagicMock,
) -> Context:
    context = Context(
        amqpsystem=AsyncMock(),
        user_context={
            "dataloader": dataloader,
            "converter": converter,
            "export_checks": export_checks,
            "settings": settings_mock,
        },
    )
    return context


async def test_import_jobtitlefromadtomo_objects() -> None:
    graphql_client_mock = AsyncMock()

    job_function_facet_user_key = "engagement_job_function"
    job_function_title = "Ansat som Software Udvikler"
    job_function_uuid = uuid4()
    graphql_client_mock.read_class_uuid_by_facet_and_class_user_key.return_value = (
        parse_obj_as(
            ReadClassUuidByFacetAndClassUserKeyClasses,
            {"objects": [{"uuid": str(job_function_uuid)}]},
        )
    )

    test_eng_uuid = uuid4()
    start_time = datetime.now() - timedelta(minutes=10)
    end_time = datetime.now()
    graphql_client_mock.read_engagements_by_employee_uuid.return_value = parse_obj_as(
        ReadEngagementsByEmployeeUuidEngagements,
        {
            "objects": [
                {
                    "current": {
                        "uuid": str(test_eng_uuid),
                        "validity": {"from": str(start_time), "to": str(end_time)},
                    }
                }
            ]
        },
    )
    settings = AsyncMock()
    moapi = MOAPI(settings, graphql_client_mock)

    dn = "CN=foo"
    test_user_uuid = uuid4()
    search_entry = {
        "type": "searchResEntry",
        "dn": dn,
        "attributes": {"hkStsuuid": test_user_uuid, "title": job_function_title},
    }
    ldap_connection = MagicMock()
    ldap_connection.get_response.return_value = [search_entry], {}

    graphql_client_mock.read_class_uuid_by_facet_and_class_user_key.assert_not_called()
    graphql_client_mock.set_job_title.assert_not_called()

    await sync_JobTitleFromADToMO(moapi, ldap_connection, dn)

    graphql_client_mock.read_class_uuid_by_facet_and_class_user_key.assert_awaited_once_with(
        job_function_facet_user_key, job_function_title
    )
    graphql_client_mock.set_job_title.assert_awaited_once_with(
        job_function=job_function_uuid,
        uuid=test_eng_uuid,
        **{"from_": start_time, "to": end_time},
    )
