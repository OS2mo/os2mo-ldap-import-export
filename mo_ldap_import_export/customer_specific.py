# SPDX-FileCopyrightText: 2019-2020 Magenta ApS
# SPDX-License-Identifier: MPL-2.0
import asyncio
from typing import Literal

from pydantic import Extra
from pydantic import Field
from ramodels.mo._shared import JobFunction
from ramodels.mo._shared import MOBase
from ramodels.mo._shared import PersonRef

from .autogenerated_graphql_client import GraphQLClient


class CustomerSpecific(MOBase, extra=Extra.allow):  # type: ignore
    async def sync_to_mo(self, graphql_client: GraphQLClient) -> None:
        pass


class JobTitleFromADToMO(CustomerSpecific):
    user: PersonRef = Field(
        description="Reference to the employee of the created engagement object."
    )
    job_function: JobFunction = Field(
        description=(
            "Reference to the job function class for the created engagement object."
        ),
    )
    # TODO: Delete once no configurations use it anymore
    job_function_fallback: JobFunction | None = Field(
        description="Noop left for backwards compatibility", default=None
    )
    type_: Literal["jobtitlefromadtomo"] = Field(
        "jobtitlefromadtomo", alias="type", description="The object type."
    )

    async def sync_to_mo(self, graphql_client: GraphQLClient) -> None:
        result = await graphql_client.read_engagements_by_employee_uuid(self.user.uuid)
        engagements = [x.current for x in result.objects if x.current is not None]
        await asyncio.gather(
            *[
                graphql_client.set_job_title(
                    uuid=obj.uuid,
                    from_=obj.validity.from_,
                    to=obj.validity.to,
                    job_function=self.job_function.uuid,
                )
                for obj in engagements
            ]
        )
